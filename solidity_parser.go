// Code generated from solidity-antlr4/Solidity.g4 by ANTLR 4.8. DO NOT EDIT.

package solidityparser // Solidity
import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 124, 975,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86,
	3, 2, 3, 2, 3, 2, 7, 2, 176, 10, 2, 12, 2, 14, 2, 179, 11, 2, 3, 2, 3,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 5, 5, 192, 10,
	5, 3, 6, 3, 6, 5, 6, 196, 10, 6, 3, 7, 3, 7, 3, 8, 5, 8, 201, 10, 8, 3,
	8, 3, 8, 3, 9, 3, 9, 3, 9, 5, 9, 208, 10, 9, 3, 10, 3, 10, 3, 10, 3, 10,
	5, 10, 214, 10, 10, 3, 10, 3, 10, 3, 10, 3, 10, 5, 10, 220, 10, 10, 3,
	10, 3, 10, 5, 10, 224, 10, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10,
	3, 10, 3, 10, 7, 10, 234, 10, 10, 12, 10, 14, 10, 237, 11, 10, 3, 10, 3,
	10, 3, 10, 3, 10, 3, 10, 5, 10, 244, 10, 10, 3, 11, 3, 11, 3, 12, 5, 12,
	249, 10, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 7, 12, 257, 10,
	12, 12, 12, 14, 12, 260, 11, 12, 5, 12, 262, 10, 12, 3, 12, 3, 12, 7, 12,
	266, 10, 12, 12, 12, 14, 12, 269, 11, 12, 3, 12, 3, 12, 3, 13, 3, 13, 3,
	13, 5, 13, 276, 10, 13, 3, 13, 5, 13, 279, 10, 13, 3, 14, 3, 14, 3, 14,
	3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 5, 14, 289, 10, 14, 3, 15, 3, 15, 7,
	15, 293, 10, 15, 12, 15, 14, 15, 296, 11, 15, 3, 15, 3, 15, 3, 15, 5, 15,
	301, 10, 15, 3, 15, 3, 15, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 5, 16, 310,
	10, 16, 3, 16, 3, 16, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17,
	3, 17, 7, 17, 322, 10, 17, 12, 17, 14, 17, 325, 11, 17, 5, 17, 327, 10,
	17, 3, 17, 3, 17, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 19, 3, 19, 3, 19,
	5, 19, 339, 10, 19, 3, 19, 3, 19, 3, 20, 3, 20, 3, 20, 5, 20, 346, 10,
	20, 3, 20, 5, 20, 349, 10, 20, 3, 21, 5, 21, 352, 10, 21, 3, 21, 3, 21,
	5, 21, 356, 10, 21, 3, 21, 3, 21, 3, 21, 5, 21, 361, 10, 21, 3, 21, 3,
	21, 5, 21, 365, 10, 21, 3, 22, 3, 22, 3, 22, 3, 23, 3, 23, 3, 23, 3, 23,
	3, 23, 3, 23, 7, 23, 376, 10, 23, 12, 23, 14, 23, 379, 11, 23, 3, 24, 5,
	24, 382, 10, 24, 3, 24, 3, 24, 3, 24, 3, 24, 5, 24, 388, 10, 24, 3, 24,
	3, 24, 3, 25, 3, 25, 3, 26, 3, 26, 3, 26, 3, 26, 5, 26, 398, 10, 26, 3,
	26, 3, 26, 7, 26, 402, 10, 26, 12, 26, 14, 26, 405, 11, 26, 3, 26, 3, 26,
	3, 27, 3, 27, 3, 27, 3, 27, 7, 27, 413, 10, 27, 12, 27, 14, 27, 416, 11,
	27, 5, 27, 418, 10, 27, 3, 27, 3, 27, 3, 28, 3, 28, 5, 28, 424, 10, 28,
	3, 28, 5, 28, 427, 10, 28, 3, 29, 3, 29, 3, 29, 3, 29, 7, 29, 433, 10,
	29, 12, 29, 14, 29, 436, 11, 29, 5, 29, 438, 10, 29, 3, 29, 3, 29, 3, 30,
	3, 30, 5, 30, 444, 10, 30, 3, 30, 5, 30, 447, 10, 30, 3, 31, 3, 31, 3,
	31, 3, 31, 7, 31, 453, 10, 31, 12, 31, 14, 31, 456, 11, 31, 5, 31, 458,
	10, 31, 3, 31, 3, 31, 3, 32, 3, 32, 5, 32, 464, 10, 32, 3, 33, 3, 33, 5,
	33, 468, 10, 33, 3, 33, 3, 33, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34, 3, 34,
	3, 34, 5, 34, 479, 10, 34, 3, 34, 3, 34, 3, 34, 5, 34, 484, 10, 34, 3,
	34, 7, 34, 487, 10, 34, 12, 34, 14, 34, 490, 11, 34, 3, 35, 3, 35, 3, 35,
	7, 35, 495, 10, 35, 12, 35, 14, 35, 498, 11, 35, 3, 36, 3, 36, 3, 36, 3,
	36, 3, 36, 3, 36, 3, 36, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 7, 37, 512,
	10, 37, 12, 37, 14, 37, 515, 11, 37, 3, 37, 3, 37, 5, 37, 519, 10, 37,
	3, 38, 3, 38, 3, 39, 3, 39, 3, 40, 3, 40, 7, 40, 527, 10, 40, 12, 40, 14,
	40, 530, 11, 40, 3, 40, 3, 40, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41,
	3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 5, 41, 546, 10, 41, 3, 42, 3,
	42, 3, 42, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 5, 43, 558,
	10, 43, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 45, 3, 45, 5, 45,
	568, 10, 45, 3, 46, 3, 46, 3, 46, 3, 46, 5, 46, 574, 10, 46, 3, 46, 3,
	46, 5, 46, 578, 10, 46, 3, 46, 5, 46, 581, 10, 46, 3, 46, 3, 46, 3, 46,
	3, 47, 3, 47, 5, 47, 588, 10, 47, 3, 47, 3, 47, 3, 48, 3, 48, 3, 48, 3,
	48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 49, 3, 49, 3, 49, 3, 50, 3, 50, 3, 50,
	3, 51, 3, 51, 5, 51, 608, 10, 51, 3, 51, 3, 51, 3, 52, 3, 52, 3, 52, 3,
	53, 3, 53, 3, 53, 3, 53, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54,
	5, 54, 626, 10, 54, 3, 54, 3, 54, 5, 54, 630, 10, 54, 3, 54, 3, 54, 3,
	55, 5, 55, 635, 10, 55, 3, 55, 3, 55, 5, 55, 639, 10, 55, 7, 55, 641, 10,
	55, 12, 55, 14, 55, 644, 11, 55, 3, 56, 3, 56, 5, 56, 648, 10, 56, 3, 56,
	7, 56, 651, 10, 56, 12, 56, 14, 56, 654, 11, 56, 3, 56, 5, 56, 657, 10,
	56, 3, 56, 3, 56, 3, 57, 3, 57, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58,
	3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3,
	58, 3, 58, 5, 58, 681, 10, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58,
	3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3,
	58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58,
	3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3,
	58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58,
	3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 7, 58, 740,
	10, 58, 12, 58, 14, 58, 743, 11, 58, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59,
	3, 59, 3, 59, 5, 59, 752, 10, 59, 3, 59, 3, 59, 3, 59, 3, 59, 3, 59, 5,
	59, 759, 10, 59, 5, 59, 761, 10, 59, 3, 60, 3, 60, 3, 60, 7, 60, 766, 10,
	60, 12, 60, 14, 60, 769, 11, 60, 3, 61, 3, 61, 3, 61, 7, 61, 774, 10, 61,
	12, 61, 14, 61, 777, 11, 61, 3, 61, 5, 61, 780, 10, 61, 3, 62, 3, 62, 3,
	62, 3, 62, 3, 63, 3, 63, 5, 63, 788, 10, 63, 3, 63, 3, 63, 5, 63, 792,
	10, 63, 5, 63, 794, 10, 63, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 65, 3,
	65, 7, 65, 803, 10, 65, 12, 65, 14, 65, 806, 11, 65, 3, 65, 3, 65, 3, 66,
	3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3,
	66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 5, 66, 827, 10, 66, 3, 67, 3, 67,
	5, 67, 831, 10, 67, 3, 68, 3, 68, 3, 68, 3, 68, 5, 68, 837, 10, 68, 3,
	68, 3, 68, 5, 68, 841, 10, 68, 3, 68, 3, 68, 7, 68, 845, 10, 68, 12, 68,
	14, 68, 848, 11, 68, 3, 68, 5, 68, 851, 10, 68, 3, 69, 3, 69, 3, 69, 3,
	69, 5, 69, 857, 10, 69, 3, 70, 3, 70, 3, 70, 3, 70, 3, 71, 3, 71, 3, 71,
	3, 71, 3, 71, 5, 71, 868, 10, 71, 3, 72, 3, 72, 3, 72, 7, 72, 873, 10,
	72, 12, 72, 14, 72, 876, 11, 72, 3, 73, 3, 73, 3, 73, 3, 74, 3, 74, 3,
	74, 3, 75, 3, 75, 3, 75, 7, 75, 887, 10, 75, 12, 75, 14, 75, 890, 11, 75,
	3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 5, 76, 898, 10, 76, 3, 77, 3,
	77, 3, 77, 3, 77, 5, 77, 904, 10, 77, 3, 77, 3, 77, 5, 77, 908, 10, 77,
	3, 77, 3, 77, 3, 78, 3, 78, 3, 78, 3, 79, 3, 79, 3, 79, 5, 79, 918, 10,
	79, 3, 79, 3, 79, 3, 79, 5, 79, 923, 10, 79, 3, 79, 3, 79, 3, 80, 3, 80,
	3, 80, 3, 80, 3, 81, 3, 81, 3, 82, 3, 82, 3, 82, 3, 82, 3, 83, 3, 83, 5,
	83, 939, 10, 83, 3, 83, 3, 83, 5, 83, 943, 10, 83, 7, 83, 945, 10, 83,
	12, 83, 14, 83, 948, 11, 83, 3, 83, 3, 83, 3, 83, 3, 83, 3, 83, 7, 83,
	955, 10, 83, 12, 83, 14, 83, 958, 11, 83, 5, 83, 960, 10, 83, 3, 83, 5,
	83, 963, 10, 83, 3, 84, 3, 84, 5, 84, 967, 10, 84, 3, 85, 3, 85, 5, 85,
	971, 10, 85, 3, 86, 3, 86, 3, 86, 2, 4, 66, 114, 87, 2, 4, 6, 8, 10, 12,
	14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48,
	50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84,
	86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116,
	118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146,
	148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 2, 20, 3, 2,
	5, 11, 3, 2, 93, 94, 3, 2, 19, 21, 5, 2, 109, 109, 113, 113, 115, 116,
	3, 2, 40, 42, 6, 2, 109, 109, 114, 114, 117, 117, 119, 119, 5, 2, 36, 36,
	51, 54, 95, 99, 3, 2, 55, 56, 3, 2, 58, 59, 3, 2, 60, 61, 4, 2, 14, 14,
	64, 65, 3, 2, 66, 67, 3, 2, 7, 10, 3, 2, 70, 71, 4, 2, 11, 11, 76, 85,
	5, 2, 102, 103, 105, 105, 121, 121, 3, 2, 102, 103, 5, 2, 15, 15, 42, 42,
	120, 120, 2, 1068, 2, 177, 3, 2, 2, 2, 4, 182, 3, 2, 2, 2, 6, 187, 3, 2,
	2, 2, 8, 191, 3, 2, 2, 2, 10, 193, 3, 2, 2, 2, 12, 197, 3, 2, 2, 2, 14,
	200, 3, 2, 2, 2, 16, 204, 3, 2, 2, 2, 18, 243, 3, 2, 2, 2, 20, 245, 3,
	2, 2, 2, 22, 248, 3, 2, 2, 2, 24, 272, 3, 2, 2, 2, 26, 288, 3, 2, 2, 2,
	28, 290, 3, 2, 2, 2, 30, 304, 3, 2, 2, 2, 32, 313, 3, 2, 2, 2, 34, 330,
	3, 2, 2, 2, 36, 335, 3, 2, 2, 2, 38, 342, 3, 2, 2, 2, 40, 351, 3, 2, 2,
	2, 42, 366, 3, 2, 2, 2, 44, 377, 3, 2, 2, 2, 46, 381, 3, 2, 2, 2, 48, 391,
	3, 2, 2, 2, 50, 393, 3, 2, 2, 2, 52, 408, 3, 2, 2, 2, 54, 421, 3, 2, 2,
	2, 56, 428, 3, 2, 2, 2, 58, 441, 3, 2, 2, 2, 60, 448, 3, 2, 2, 2, 62, 461,
	3, 2, 2, 2, 64, 465, 3, 2, 2, 2, 66, 478, 3, 2, 2, 2, 68, 491, 3, 2, 2,
	2, 70, 499, 3, 2, 2, 2, 72, 506, 3, 2, 2, 2, 74, 520, 3, 2, 2, 2, 76, 522,
	3, 2, 2, 2, 78, 524, 3, 2, 2, 2, 80, 545, 3, 2, 2, 2, 82, 547, 3, 2, 2,
	2, 84, 550, 3, 2, 2, 2, 86, 559, 3, 2, 2, 2, 88, 567, 3, 2, 2, 2, 90, 569,
	3, 2, 2, 2, 92, 585, 3, 2, 2, 2, 94, 591, 3, 2, 2, 2, 96, 599, 3, 2, 2,
	2, 98, 602, 3, 2, 2, 2, 100, 605, 3, 2, 2, 2, 102, 611, 3, 2, 2, 2, 104,
	614, 3, 2, 2, 2, 106, 625, 3, 2, 2, 2, 108, 634, 3, 2, 2, 2, 110, 645,
	3, 2, 2, 2, 112, 660, 3, 2, 2, 2, 114, 680, 3, 2, 2, 2, 116, 760, 3, 2,
	2, 2, 118, 762, 3, 2, 2, 2, 120, 770, 3, 2, 2, 2, 122, 781, 3, 2, 2, 2,
	124, 793, 3, 2, 2, 2, 126, 795, 3, 2, 2, 2, 128, 800, 3, 2, 2, 2, 130,
	826, 3, 2, 2, 2, 132, 830, 3, 2, 2, 2, 134, 836, 3, 2, 2, 2, 136, 852,
	3, 2, 2, 2, 138, 858, 3, 2, 2, 2, 140, 867, 3, 2, 2, 2, 142, 869, 3, 2,
	2, 2, 144, 877, 3, 2, 2, 2, 146, 880, 3, 2, 2, 2, 148, 883, 3, 2, 2, 2,
	150, 897, 3, 2, 2, 2, 152, 899, 3, 2, 2, 2, 154, 911, 3, 2, 2, 2, 156,
	914, 3, 2, 2, 2, 158, 926, 3, 2, 2, 2, 160, 930, 3, 2, 2, 2, 162, 932,
	3, 2, 2, 2, 164, 962, 3, 2, 2, 2, 166, 966, 3, 2, 2, 2, 168, 968, 3, 2,
	2, 2, 170, 972, 3, 2, 2, 2, 172, 176, 5, 4, 3, 2, 173, 176, 5, 18, 10,
	2, 174, 176, 5, 22, 12, 2, 175, 172, 3, 2, 2, 2, 175, 173, 3, 2, 2, 2,
	175, 174, 3, 2, 2, 2, 176, 179, 3, 2, 2, 2, 177, 175, 3, 2, 2, 2, 177,
	178, 3, 2, 2, 2, 178, 180, 3, 2, 2, 2, 179, 177, 3, 2, 2, 2, 180, 181,
	7, 2, 2, 3, 181, 3, 3, 2, 2, 2, 182, 183, 7, 3, 2, 2, 183, 184, 5, 6, 4,
	2, 184, 185, 5, 8, 5, 2, 185, 186, 7, 4, 2, 2, 186, 5, 3, 2, 2, 2, 187,
	188, 5, 170, 86, 2, 188, 7, 3, 2, 2, 2, 189, 192, 5, 10, 6, 2, 190, 192,
	5, 114, 58, 2, 191, 189, 3, 2, 2, 2, 191, 190, 3, 2, 2, 2, 192, 9, 3, 2,
	2, 2, 193, 195, 5, 14, 8, 2, 194, 196, 5, 14, 8, 2, 195, 194, 3, 2, 2,
	2, 195, 196, 3, 2, 2, 2, 196, 11, 3, 2, 2, 2, 197, 198, 9, 2, 2, 2, 198,
	13, 3, 2, 2, 2, 199, 201, 5, 12, 7, 2, 200, 199, 3, 2, 2, 2, 200, 201,
	3, 2, 2, 2, 201, 202, 3, 2, 2, 2, 202, 203, 7, 100, 2, 2, 203, 15, 3, 2,
	2, 2, 204, 207, 5, 170, 86, 2, 205, 206, 7, 12, 2, 2, 206, 208, 5, 170,
	86, 2, 207, 205, 3, 2, 2, 2, 207, 208, 3, 2, 2, 2, 208, 17, 3, 2, 2, 2,
	209, 210, 7, 13, 2, 2, 210, 213, 7, 121, 2, 2, 211, 212, 7, 12, 2, 2, 212,
	214, 5, 170, 86, 2, 213, 211, 3, 2, 2, 2, 213, 214, 3, 2, 2, 2, 214, 215,
	3, 2, 2, 2, 215, 244, 7, 4, 2, 2, 216, 219, 7, 13, 2, 2, 217, 220, 7, 14,
	2, 2, 218, 220, 5, 170, 86, 2, 219, 217, 3, 2, 2, 2, 219, 218, 3, 2, 2,
	2, 220, 223, 3, 2, 2, 2, 221, 222, 7, 12, 2, 2, 222, 224, 5, 170, 86, 2,
	223, 221, 3, 2, 2, 2, 223, 224, 3, 2, 2, 2, 224, 225, 3, 2, 2, 2, 225,
	226, 7, 15, 2, 2, 226, 227, 7, 121, 2, 2, 227, 244, 7, 4, 2, 2, 228, 229,
	7, 13, 2, 2, 229, 230, 7, 16, 2, 2, 230, 235, 5, 16, 9, 2, 231, 232, 7,
	17, 2, 2, 232, 234, 5, 16, 9, 2, 233, 231, 3, 2, 2, 2, 234, 237, 3, 2,
	2, 2, 235, 233, 3, 2, 2, 2, 235, 236, 3, 2, 2, 2, 236, 238, 3, 2, 2, 2,
	237, 235, 3, 2, 2, 2, 238, 239, 7, 18, 2, 2, 239, 240, 7, 15, 2, 2, 240,
	241, 7, 121, 2, 2, 241, 242, 7, 4, 2, 2, 242, 244, 3, 2, 2, 2, 243, 209,
	3, 2, 2, 2, 243, 216, 3, 2, 2, 2, 243, 228, 3, 2, 2, 2, 244, 19, 3, 2,
	2, 2, 245, 246, 9, 3, 2, 2, 246, 21, 3, 2, 2, 2, 247, 249, 5, 20, 11, 2,
	248, 247, 3, 2, 2, 2, 248, 249, 3, 2, 2, 2, 249, 250, 3, 2, 2, 2, 250,
	251, 9, 4, 2, 2, 251, 261, 5, 170, 86, 2, 252, 253, 7, 22, 2, 2, 253, 258,
	5, 24, 13, 2, 254, 255, 7, 17, 2, 2, 255, 257, 5, 24, 13, 2, 256, 254,
	3, 2, 2, 2, 257, 260, 3, 2, 2, 2, 258, 256, 3, 2, 2, 2, 258, 259, 3, 2,
	2, 2, 259, 262, 3, 2, 2, 2, 260, 258, 3, 2, 2, 2, 261, 252, 3, 2, 2, 2,
	261, 262, 3, 2, 2, 2, 262, 263, 3, 2, 2, 2, 263, 267, 7, 16, 2, 2, 264,
	266, 5, 26, 14, 2, 265, 264, 3, 2, 2, 2, 266, 269, 3, 2, 2, 2, 267, 265,
	3, 2, 2, 2, 267, 268, 3, 2, 2, 2, 268, 270, 3, 2, 2, 2, 269, 267, 3, 2,
	2, 2, 270, 271, 7, 18, 2, 2, 271, 23, 3, 2, 2, 2, 272, 278, 5, 68, 35,
	2, 273, 275, 7, 23, 2, 2, 274, 276, 5, 118, 60, 2, 275, 274, 3, 2, 2, 2,
	275, 276, 3, 2, 2, 2, 276, 277, 3, 2, 2, 2, 277, 279, 7, 24, 2, 2, 278,
	273, 3, 2, 2, 2, 278, 279, 3, 2, 2, 2, 279, 25, 3, 2, 2, 2, 280, 289, 5,
	28, 15, 2, 281, 289, 5, 30, 16, 2, 282, 289, 5, 32, 17, 2, 283, 289, 5,
	34, 18, 2, 284, 289, 5, 36, 19, 2, 285, 289, 5, 40, 21, 2, 286, 289, 5,
	46, 24, 2, 287, 289, 5, 50, 26, 2, 288, 280, 3, 2, 2, 2, 288, 281, 3, 2,
	2, 2, 288, 282, 3, 2, 2, 2, 288, 283, 3, 2, 2, 2, 288, 284, 3, 2, 2, 2,
	288, 285, 3, 2, 2, 2, 288, 286, 3, 2, 2, 2, 288, 287, 3, 2, 2, 2, 289,
	27, 3, 2, 2, 2, 290, 294, 5, 66, 34, 2, 291, 293, 9, 5, 2, 2, 292, 291,
	3, 2, 2, 2, 293, 296, 3, 2, 2, 2, 294, 292, 3, 2, 2, 2, 294, 295, 3, 2,
	2, 2, 295, 297, 3, 2, 2, 2, 296, 294, 3, 2, 2, 2, 297, 300, 5, 170, 86,
	2, 298, 299, 7, 11, 2, 2, 299, 301, 5, 114, 58, 2, 300, 298, 3, 2, 2, 2,
	300, 301, 3, 2, 2, 2, 301, 302, 3, 2, 2, 2, 302, 303, 7, 4, 2, 2, 303,
	29, 3, 2, 2, 2, 304, 305, 7, 25, 2, 2, 305, 306, 5, 170, 86, 2, 306, 309,
	7, 26, 2, 2, 307, 310, 7, 14, 2, 2, 308, 310, 5, 66, 34, 2, 309, 307, 3,
	2, 2, 2, 309, 308, 3, 2, 2, 2, 310, 311, 3, 2, 2, 2, 311, 312, 7, 4, 2,
	2, 312, 31, 3, 2, 2, 2, 313, 314, 7, 27, 2, 2, 314, 315, 5, 170, 86, 2,
	315, 326, 7, 16, 2, 2, 316, 317, 5, 64, 33, 2, 317, 323, 7, 4, 2, 2, 318,
	319, 5, 64, 33, 2, 319, 320, 7, 4, 2, 2, 320, 322, 3, 2, 2, 2, 321, 318,
	3, 2, 2, 2, 322, 325, 3, 2, 2, 2, 323, 321, 3, 2, 2, 2, 323, 324, 3, 2,
	2, 2, 324, 327, 3, 2, 2, 2, 325, 323, 3, 2, 2, 2, 326, 316, 3, 2, 2, 2,
	326, 327, 3, 2, 2, 2, 327, 328, 3, 2, 2, 2, 328, 329, 7, 18, 2, 2, 329,
	33, 3, 2, 2, 2, 330, 331, 7, 28, 2, 2, 331, 332, 5, 52, 27, 2, 332, 333,
	5, 44, 23, 2, 333, 334, 5, 78, 40, 2, 334, 35, 3, 2, 2, 2, 335, 336, 7,
	29, 2, 2, 336, 338, 5, 170, 86, 2, 337, 339, 5, 52, 27, 2, 338, 337, 3,
	2, 2, 2, 338, 339, 3, 2, 2, 2, 339, 340, 3, 2, 2, 2, 340, 341, 5, 78, 40,
	2, 341, 37, 3, 2, 2, 2, 342, 348, 5, 170, 86, 2, 343, 345, 7, 23, 2, 2,
	344, 346, 5, 118, 60, 2, 345, 344, 3, 2, 2, 2, 345, 346, 3, 2, 2, 2, 346,
	347, 3, 2, 2, 2, 347, 349, 7, 24, 2, 2, 348, 343, 3, 2, 2, 2, 348, 349,
	3, 2, 2, 2, 349, 39, 3, 2, 2, 2, 350, 352, 5, 20, 11, 2, 351, 350, 3, 2,
	2, 2, 351, 352, 3, 2, 2, 2, 352, 353, 3, 2, 2, 2, 353, 355, 7, 30, 2, 2,
	354, 356, 5, 170, 86, 2, 355, 354, 3, 2, 2, 2, 355, 356, 3, 2, 2, 2, 356,
	357, 3, 2, 2, 2, 357, 358, 5, 52, 27, 2, 358, 360, 5, 44, 23, 2, 359, 361,
	5, 42, 22, 2, 360, 359, 3, 2, 2, 2, 360, 361, 3, 2, 2, 2, 361, 364, 3,
	2, 2, 2, 362, 365, 7, 4, 2, 2, 363, 365, 5, 78, 40, 2, 364, 362, 3, 2,
	2, 2, 364, 363, 3, 2, 2, 2, 365, 41, 3, 2, 2, 2, 366, 367, 7, 31, 2, 2,
	367, 368, 5, 52, 27, 2, 368, 43, 3, 2, 2, 2, 369, 376, 5, 38, 20, 2, 370,
	376, 5, 76, 39, 2, 371, 376, 7, 111, 2, 2, 372, 376, 7, 116, 2, 2, 373,
	376, 7, 113, 2, 2, 374, 376, 7, 115, 2, 2, 375, 369, 3, 2, 2, 2, 375, 370,
	3, 2, 2, 2, 375, 371, 3, 2, 2, 2, 375, 372, 3, 2, 2, 2, 375, 373, 3, 2,
	2, 2, 375, 374, 3, 2, 2, 2, 376, 379, 3, 2, 2, 2, 377, 375, 3, 2, 2, 2,
	377, 378, 3, 2, 2, 2, 378, 45, 3, 2, 2, 2, 379, 377, 3, 2, 2, 2, 380, 382,
	5, 20, 11, 2, 381, 380, 3, 2, 2, 2, 381, 382, 3, 2, 2, 2, 382, 383, 3,
	2, 2, 2, 383, 384, 7, 32, 2, 2, 384, 385, 5, 170, 86, 2, 385, 387, 5, 56,
	29, 2, 386, 388, 7, 107, 2, 2, 387, 386, 3, 2, 2, 2, 387, 388, 3, 2, 2,
	2, 388, 389, 3, 2, 2, 2, 389, 390, 7, 4, 2, 2, 390, 47, 3, 2, 2, 2, 391,
	392, 5, 170, 86, 2, 392, 49, 3, 2, 2, 2, 393, 394, 7, 33, 2, 2, 394, 395,
	5, 170, 86, 2, 395, 397, 7, 16, 2, 2, 396, 398, 5, 48, 25, 2, 397, 396,
	3, 2, 2, 2, 397, 398, 3, 2, 2, 2, 398, 403, 3, 2, 2, 2, 399, 400, 7, 17,
	2, 2, 400, 402, 5, 48, 25, 2, 401, 399, 3, 2, 2, 2, 402, 405, 3, 2, 2,
	2, 403, 401, 3, 2, 2, 2, 403, 404, 3, 2, 2, 2, 404, 406, 3, 2, 2, 2, 405,
	403, 3, 2, 2, 2, 406, 407, 7, 18, 2, 2, 407, 51, 3, 2, 2, 2, 408, 417,
	7, 23, 2, 2, 409, 414, 5, 54, 28, 2, 410, 411, 7, 17, 2, 2, 411, 413, 5,
	54, 28, 2, 412, 410, 3, 2, 2, 2, 413, 416, 3, 2, 2, 2, 414, 412, 3, 2,
	2, 2, 414, 415, 3, 2, 2, 2, 415, 418, 3, 2, 2, 2, 416, 414, 3, 2, 2, 2,
	417, 409, 3, 2, 2, 2, 417, 418, 3, 2, 2, 2, 418, 419, 3, 2, 2, 2, 419,
	420, 7, 24, 2, 2, 420, 53, 3, 2, 2, 2, 421, 423, 5, 66, 34, 2, 422, 424,
	5, 74, 38, 2, 423, 422, 3, 2, 2, 2, 423, 424, 3, 2, 2, 2, 424, 426, 3,
	2, 2, 2, 425, 427, 5, 170, 86, 2, 426, 425, 3, 2, 2, 2, 426, 427, 3, 2,
	2, 2, 427, 55, 3, 2, 2, 2, 428, 437, 7, 23, 2, 2, 429, 434, 5, 58, 30,
	2, 430, 431, 7, 17, 2, 2, 431, 433, 5, 58, 30, 2, 432, 430, 3, 2, 2, 2,
	433, 436, 3, 2, 2, 2, 434, 432, 3, 2, 2, 2, 434, 435, 3, 2, 2, 2, 435,
	438, 3, 2, 2, 2, 436, 434, 3, 2, 2, 2, 437, 429, 3, 2, 2, 2, 437, 438,
	3, 2, 2, 2, 438, 439, 3, 2, 2, 2, 439, 440, 7, 24, 2, 2, 440, 57, 3, 2,
	2, 2, 441, 443, 5, 66, 34, 2, 442, 444, 7, 112, 2, 2, 443, 442, 3, 2, 2,
	2, 443, 444, 3, 2, 2, 2, 444, 446, 3, 2, 2, 2, 445, 447, 5, 170, 86, 2,
	446, 445, 3, 2, 2, 2, 446, 447, 3, 2, 2, 2, 447, 59, 3, 2, 2, 2, 448, 457,
	7, 23, 2, 2, 449, 454, 5, 62, 32, 2, 450, 451, 7, 17, 2, 2, 451, 453, 5,
	62, 32, 2, 452, 450, 3, 2, 2, 2, 453, 456, 3, 2, 2, 2, 454, 452, 3, 2,
	2, 2, 454, 455, 3, 2, 2, 2, 455, 458, 3, 2, 2, 2, 456, 454, 3, 2, 2, 2,
	457, 449, 3, 2, 2, 2, 457, 458, 3, 2, 2, 2, 458, 459, 3, 2, 2, 2, 459,
	460, 7, 24, 2, 2, 460, 61, 3, 2, 2, 2, 461, 463, 5, 66, 34, 2, 462, 464,
	5, 74, 38, 2, 463, 462, 3, 2, 2, 2, 463, 464, 3, 2, 2, 2, 464, 63, 3, 2,
	2, 2, 465, 467, 5, 66, 34, 2, 466, 468, 5, 74, 38, 2, 467, 466, 3, 2, 2,
	2, 467, 468, 3, 2, 2, 2, 468, 469, 3, 2, 2, 2, 469, 470, 5, 170, 86, 2,
	470, 65, 3, 2, 2, 2, 471, 472, 8, 34, 1, 2, 472, 479, 5, 112, 57, 2, 473,
	479, 5, 68, 35, 2, 474, 479, 5, 70, 36, 2, 475, 479, 5, 72, 37, 2, 476,
	477, 7, 36, 2, 2, 477, 479, 7, 114, 2, 2, 478, 471, 3, 2, 2, 2, 478, 473,
	3, 2, 2, 2, 478, 474, 3, 2, 2, 2, 478, 475, 3, 2, 2, 2, 478, 476, 3, 2,
	2, 2, 479, 488, 3, 2, 2, 2, 480, 481, 12, 5, 2, 2, 481, 483, 7, 34, 2,
	2, 482, 484, 5, 114, 58, 2, 483, 482, 3, 2, 2, 2, 483, 484, 3, 2, 2, 2,
	484, 485, 3, 2, 2, 2, 485, 487, 7, 35, 2, 2, 486, 480, 3, 2, 2, 2, 487,
	490, 3, 2, 2, 2, 488, 486, 3, 2, 2, 2, 488, 489, 3, 2, 2, 2, 489, 67, 3,
	2, 2, 2, 490, 488, 3, 2, 2, 2, 491, 496, 5, 170, 86, 2, 492, 493, 7, 37,
	2, 2, 493, 495, 5, 170, 86, 2, 494, 492, 3, 2, 2, 2, 495, 498, 3, 2, 2,
	2, 496, 494, 3, 2, 2, 2, 496, 497, 3, 2, 2, 2, 497, 69, 3, 2, 2, 2, 498,
	496, 3, 2, 2, 2, 499, 500, 7, 38, 2, 2, 500, 501, 7, 23, 2, 2, 501, 502,
	5, 112, 57, 2, 502, 503, 7, 39, 2, 2, 503, 504, 5, 66, 34, 2, 504, 505,
	7, 24, 2, 2, 505, 71, 3, 2, 2, 2, 506, 507, 7, 30, 2, 2, 507, 513, 5, 60,
	31, 2, 508, 512, 7, 113, 2, 2, 509, 512, 7, 111, 2, 2, 510, 512, 5, 76,
	39, 2, 511, 508, 3, 2, 2, 2, 511, 509, 3, 2, 2, 2, 511, 510, 3, 2, 2, 2,
	512, 515, 3, 2, 2, 2, 513, 511, 3, 2, 2, 2, 513, 514, 3, 2, 2, 2, 514,
	518, 3, 2, 2, 2, 515, 513, 3, 2, 2, 2, 516, 517, 7, 31, 2, 2, 517, 519,
	5, 60, 31, 2, 518, 516, 3, 2, 2, 2, 518, 519, 3, 2, 2, 2, 519, 73, 3, 2,
	2, 2, 520, 521, 9, 6, 2, 2, 521, 75, 3, 2, 2, 2, 522, 523, 9, 7, 2, 2,
	523, 77, 3, 2, 2, 2, 524, 528, 7, 16, 2, 2, 525, 527, 5, 80, 41, 2, 526,
	525, 3, 2, 2, 2, 527, 530, 3, 2, 2, 2, 528, 526, 3, 2, 2, 2, 528, 529,
	3, 2, 2, 2, 529, 531, 3, 2, 2, 2, 530, 528, 3, 2, 2, 2, 531, 532, 7, 18,
	2, 2, 532, 79, 3, 2, 2, 2, 533, 546, 5, 84, 43, 2, 534, 546, 5, 86, 44,
	2, 535, 546, 5, 90, 46, 2, 536, 546, 5, 78, 40, 2, 537, 546, 5, 92, 47,
	2, 538, 546, 5, 94, 48, 2, 539, 546, 5, 96, 49, 2, 540, 546, 5, 98, 50,
	2, 541, 546, 5, 100, 51, 2, 542, 546, 5, 102, 52, 2, 543, 546, 5, 104,
	53, 2, 544, 546, 5, 88, 45, 2, 545, 533, 3, 2, 2, 2, 545, 534, 3, 2, 2,
	2, 545, 535, 3, 2, 2, 2, 545, 536, 3, 2, 2, 2, 545, 537, 3, 2, 2, 2, 545,
	538, 3, 2, 2, 2, 545, 539, 3, 2, 2, 2, 545, 540, 3, 2, 2, 2, 545, 541,
	3, 2, 2, 2, 545, 542, 3, 2, 2, 2, 545, 543, 3, 2, 2, 2, 545, 544, 3, 2,
	2, 2, 546, 81, 3, 2, 2, 2, 547, 548, 5, 114, 58, 2, 548, 549, 7, 4, 2,
	2, 549, 83, 3, 2, 2, 2, 550, 551, 7, 43, 2, 2, 551, 552, 7, 23, 2, 2, 552,
	553, 5, 114, 58, 2, 553, 554, 7, 24, 2, 2, 554, 557, 5, 80, 41, 2, 555,
	556, 7, 44, 2, 2, 556, 558, 5, 80, 41, 2, 557, 555, 3, 2, 2, 2, 557, 558,
	3, 2, 2, 2, 558, 85, 3, 2, 2, 2, 559, 560, 7, 45, 2, 2, 560, 561, 7, 23,
	2, 2, 561, 562, 5, 114, 58, 2, 562, 563, 7, 24, 2, 2, 563, 564, 5, 80,
	41, 2, 564, 87, 3, 2, 2, 2, 565, 568, 5, 106, 54, 2, 566, 568, 5, 82, 42,
	2, 567, 565, 3, 2, 2, 2, 567, 566, 3, 2, 2, 2, 568, 89, 3, 2, 2, 2, 569,
	570, 7, 26, 2, 2, 570, 573, 7, 23, 2, 2, 571, 574, 5, 88, 45, 2, 572, 574,
	7, 4, 2, 2, 573, 571, 3, 2, 2, 2, 573, 572, 3, 2, 2, 2, 574, 577, 3, 2,
	2, 2, 575, 578, 5, 82, 42, 2, 576, 578, 7, 4, 2, 2, 577, 575, 3, 2, 2,
	2, 577, 576, 3, 2, 2, 2, 578, 580, 3, 2, 2, 2, 579, 581, 5, 114, 58, 2,
	580, 579, 3, 2, 2, 2, 580, 581, 3, 2, 2, 2, 581, 582, 3, 2, 2, 2, 582,
	583, 7, 24, 2, 2, 583, 584, 5, 80, 41, 2, 584, 91, 3, 2, 2, 2, 585, 587,
	7, 46, 2, 2, 586, 588, 7, 121, 2, 2, 587, 586, 3, 2, 2, 2, 587, 588, 3,
	2, 2, 2, 588, 589, 3, 2, 2, 2, 589, 590, 5, 128, 65, 2, 590, 93, 3, 2,
	2, 2, 591, 592, 7, 47, 2, 2, 592, 593, 5, 80, 41, 2, 593, 594, 7, 45, 2,
	2, 594, 595, 7, 23, 2, 2, 595, 596, 5, 114, 58, 2, 596, 597, 7, 24, 2,
	2, 597, 598, 7, 4, 2, 2, 598, 95, 3, 2, 2, 2, 599, 600, 7, 110, 2, 2, 600,
	601, 7, 4, 2, 2, 601, 97, 3, 2, 2, 2, 602, 603, 7, 108, 2, 2, 603, 604,
	7, 4, 2, 2, 604, 99, 3, 2, 2, 2, 605, 607, 7, 48, 2, 2, 606, 608, 5, 114,
	58, 2, 607, 606, 3, 2, 2, 2, 607, 608, 3, 2, 2, 2, 608, 609, 3, 2, 2, 2,
	609, 610, 7, 4, 2, 2, 610, 101, 3, 2, 2, 2, 611, 612, 7, 49, 2, 2, 612,
	613, 7, 4, 2, 2, 613, 103, 3, 2, 2, 2, 614, 615, 7, 50, 2, 2, 615, 616,
	5, 126, 64, 2, 616, 617, 7, 4, 2, 2, 617, 105, 3, 2, 2, 2, 618, 619, 7,
	51, 2, 2, 619, 626, 5, 110, 56, 2, 620, 626, 5, 64, 33, 2, 621, 622, 7,
	23, 2, 2, 622, 623, 5, 108, 55, 2, 623, 624, 7, 24, 2, 2, 624, 626, 3,
	2, 2, 2, 625, 618, 3, 2, 2, 2, 625, 620, 3, 2, 2, 2, 625, 621, 3, 2, 2,
	2, 626, 629, 3, 2, 2, 2, 627, 628, 7, 11, 2, 2, 628, 630, 5, 114, 58, 2,
	629, 627, 3, 2, 2, 2, 629, 630, 3, 2, 2, 2, 630, 631, 3, 2, 2, 2, 631,
	632, 7, 4, 2, 2, 632, 107, 3, 2, 2, 2, 633, 635, 5, 64, 33, 2, 634, 633,
	3, 2, 2, 2, 634, 635, 3, 2, 2, 2, 635, 642, 3, 2, 2, 2, 636, 638, 7, 17,
	2, 2, 637, 639, 5, 64, 33, 2, 638, 637, 3, 2, 2, 2, 638, 639, 3, 2, 2,
	2, 639, 641, 3, 2, 2, 2, 640, 636, 3, 2, 2, 2, 641, 644, 3, 2, 2, 2, 642,
	640, 3, 2, 2, 2, 642, 643, 3, 2, 2, 2, 643, 109, 3, 2, 2, 2, 644, 642,
	3, 2, 2, 2, 645, 652, 7, 23, 2, 2, 646, 648, 5, 170, 86, 2, 647, 646, 3,
	2, 2, 2, 647, 648, 3, 2, 2, 2, 648, 649, 3, 2, 2, 2, 649, 651, 7, 17, 2,
	2, 650, 647, 3, 2, 2, 2, 651, 654, 3, 2, 2, 2, 652, 650, 3, 2, 2, 2, 652,
	653, 3, 2, 2, 2, 653, 656, 3, 2, 2, 2, 654, 652, 3, 2, 2, 2, 655, 657,
	5, 170, 86, 2, 656, 655, 3, 2, 2, 2, 656, 657, 3, 2, 2, 2, 657, 658, 3,
	2, 2, 2, 658, 659, 7, 24, 2, 2, 659, 111, 3, 2, 2, 2, 660, 661, 9, 8, 2,
	2, 661, 113, 3, 2, 2, 2, 662, 663, 8, 58, 1, 2, 663, 664, 7, 57, 2, 2,
	664, 681, 5, 66, 34, 2, 665, 666, 7, 23, 2, 2, 666, 667, 5, 114, 58, 2,
	667, 668, 7, 24, 2, 2, 668, 681, 3, 2, 2, 2, 669, 670, 9, 9, 2, 2, 670,
	681, 5, 114, 58, 21, 671, 672, 9, 10, 2, 2, 672, 681, 5, 114, 58, 20, 673,
	674, 9, 11, 2, 2, 674, 681, 5, 114, 58, 19, 675, 676, 7, 62, 2, 2, 676,
	681, 5, 114, 58, 18, 677, 678, 7, 6, 2, 2, 678, 681, 5, 114, 58, 17, 679,
	681, 5, 116, 59, 2, 680, 662, 3, 2, 2, 2, 680, 665, 3, 2, 2, 2, 680, 669,
	3, 2, 2, 2, 680, 671, 3, 2, 2, 2, 680, 673, 3, 2, 2, 2, 680, 675, 3, 2,
	2, 2, 680, 677, 3, 2, 2, 2, 680, 679, 3, 2, 2, 2, 681, 741, 3, 2, 2, 2,
	682, 683, 12, 16, 2, 2, 683, 684, 7, 63, 2, 2, 684, 740, 5, 114, 58, 17,
	685, 686, 12, 15, 2, 2, 686, 687, 9, 12, 2, 2, 687, 740, 5, 114, 58, 16,
	688, 689, 12, 14, 2, 2, 689, 690, 9, 10, 2, 2, 690, 740, 5, 114, 58, 15,
	691, 692, 12, 13, 2, 2, 692, 693, 9, 13, 2, 2, 693, 740, 5, 114, 58, 14,
	694, 695, 12, 12, 2, 2, 695, 696, 7, 68, 2, 2, 696, 740, 5, 114, 58, 13,
	697, 698, 12, 11, 2, 2, 698, 699, 7, 5, 2, 2, 699, 740, 5, 114, 58, 12,
	700, 701, 12, 10, 2, 2, 701, 702, 7, 69, 2, 2, 702, 740, 5, 114, 58, 11,
	703, 704, 12, 9, 2, 2, 704, 705, 9, 14, 2, 2, 705, 740, 5, 114, 58, 10,
	706, 707, 12, 8, 2, 2, 707, 708, 9, 15, 2, 2, 708, 740, 5, 114, 58, 9,
	709, 710, 12, 7, 2, 2, 710, 711, 7, 72, 2, 2, 711, 740, 5, 114, 58, 8,
	712, 713, 12, 6, 2, 2, 713, 714, 7, 73, 2, 2, 714, 740, 5, 114, 58, 7,
	715, 716, 12, 5, 2, 2, 716, 717, 7, 74, 2, 2, 717, 718, 5, 114, 58, 2,
	718, 719, 7, 75, 2, 2, 719, 720, 5, 114, 58, 6, 720, 740, 3, 2, 2, 2, 721,
	722, 12, 4, 2, 2, 722, 723, 9, 16, 2, 2, 723, 740, 5, 114, 58, 5, 724,
	725, 12, 27, 2, 2, 725, 740, 9, 9, 2, 2, 726, 727, 12, 25, 2, 2, 727, 728,
	7, 34, 2, 2, 728, 729, 5, 114, 58, 2, 729, 730, 7, 35, 2, 2, 730, 740,
	3, 2, 2, 2, 731, 732, 12, 24, 2, 2, 732, 733, 7, 23, 2, 2, 733, 734, 5,
	124, 63, 2, 734, 735, 7, 24, 2, 2, 735, 740, 3, 2, 2, 2, 736, 737, 12,
	23, 2, 2, 737, 738, 7, 37, 2, 2, 738, 740, 5, 170, 86, 2, 739, 682, 3,
	2, 2, 2, 739, 685, 3, 2, 2, 2, 739, 688, 3, 2, 2, 2, 739, 691, 3, 2, 2,
	2, 739, 694, 3, 2, 2, 2, 739, 697, 3, 2, 2, 2, 739, 700, 3, 2, 2, 2, 739,
	703, 3, 2, 2, 2, 739, 706, 3, 2, 2, 2, 739, 709, 3, 2, 2, 2, 739, 712,
	3, 2, 2, 2, 739, 715, 3, 2, 2, 2, 739, 721, 3, 2, 2, 2, 739, 724, 3, 2,
	2, 2, 739, 726, 3, 2, 2, 2, 739, 731, 3, 2, 2, 2, 739, 736, 3, 2, 2, 2,
	740, 743, 3, 2, 2, 2, 741, 739, 3, 2, 2, 2, 741, 742, 3, 2, 2, 2, 742,
	115, 3, 2, 2, 2, 743, 741, 3, 2, 2, 2, 744, 761, 7, 101, 2, 2, 745, 761,
	5, 168, 85, 2, 746, 761, 7, 105, 2, 2, 747, 761, 7, 121, 2, 2, 748, 751,
	5, 170, 86, 2, 749, 750, 7, 34, 2, 2, 750, 752, 7, 35, 2, 2, 751, 749,
	3, 2, 2, 2, 751, 752, 3, 2, 2, 2, 752, 761, 3, 2, 2, 2, 753, 761, 7, 118,
	2, 2, 754, 761, 5, 164, 83, 2, 755, 758, 5, 166, 84, 2, 756, 757, 7, 34,
	2, 2, 757, 759, 7, 35, 2, 2, 758, 756, 3, 2, 2, 2, 758, 759, 3, 2, 2, 2,
	759, 761, 3, 2, 2, 2, 760, 744, 3, 2, 2, 2, 760, 745, 3, 2, 2, 2, 760,
	746, 3, 2, 2, 2, 760, 747, 3, 2, 2, 2, 760, 748, 3, 2, 2, 2, 760, 753,
	3, 2, 2, 2, 760, 754, 3, 2, 2, 2, 760, 755, 3, 2, 2, 2, 761, 117, 3, 2,
	2, 2, 762, 767, 5, 114, 58, 2, 763, 764, 7, 17, 2, 2, 764, 766, 5, 114,
	58, 2, 765, 763, 3, 2, 2, 2, 766, 769, 3, 2, 2, 2, 767, 765, 3, 2, 2, 2,
	767, 768, 3, 2, 2, 2, 768, 119, 3, 2, 2, 2, 769, 767, 3, 2, 2, 2, 770,
	775, 5, 122, 62, 2, 771, 772, 7, 17, 2, 2, 772, 774, 5, 122, 62, 2, 773,
	771, 3, 2, 2, 2, 774, 777, 3, 2, 2, 2, 775, 773, 3, 2, 2, 2, 775, 776,
	3, 2, 2, 2, 776, 779, 3, 2, 2, 2, 777, 775, 3, 2, 2, 2, 778, 780, 7, 17,
	2, 2, 779, 778, 3, 2, 2, 2, 779, 780, 3, 2, 2, 2, 780, 121, 3, 2, 2, 2,
	781, 782, 5, 170, 86, 2, 782, 783, 7, 75, 2, 2, 783, 784, 5, 114, 58, 2,
	784, 123, 3, 2, 2, 2, 785, 787, 7, 16, 2, 2, 786, 788, 5, 120, 61, 2, 787,
	786, 3, 2, 2, 2, 787, 788, 3, 2, 2, 2, 788, 789, 3, 2, 2, 2, 789, 794,
	7, 18, 2, 2, 790, 792, 5, 118, 60, 2, 791, 790, 3, 2, 2, 2, 791, 792, 3,
	2, 2, 2, 792, 794, 3, 2, 2, 2, 793, 785, 3, 2, 2, 2, 793, 791, 3, 2, 2,
	2, 794, 125, 3, 2, 2, 2, 795, 796, 5, 114, 58, 2, 796, 797, 7, 23, 2, 2,
	797, 798, 5, 124, 63, 2, 798, 799, 7, 24, 2, 2, 799, 127, 3, 2, 2, 2, 800,
	804, 7, 16, 2, 2, 801, 803, 5, 130, 66, 2, 802, 801, 3, 2, 2, 2, 803, 806,
	3, 2, 2, 2, 804, 802, 3, 2, 2, 2, 804, 805, 3, 2, 2, 2, 805, 807, 3, 2,
	2, 2, 806, 804, 3, 2, 2, 2, 807, 808, 7, 18, 2, 2, 808, 129, 3, 2, 2, 2,
	809, 827, 5, 170, 86, 2, 810, 827, 5, 128, 65, 2, 811, 827, 5, 132, 67,
	2, 812, 827, 5, 136, 69, 2, 813, 827, 5, 138, 70, 2, 814, 827, 5, 144,
	73, 2, 815, 827, 5, 146, 74, 2, 816, 827, 5, 148, 75, 2, 817, 827, 5, 152,
	77, 2, 818, 827, 5, 156, 79, 2, 819, 827, 5, 158, 80, 2, 820, 827, 7, 108,
	2, 2, 821, 827, 7, 110, 2, 2, 822, 827, 5, 162, 82, 2, 823, 827, 5, 168,
	85, 2, 824, 827, 7, 121, 2, 2, 825, 827, 7, 105, 2, 2, 826, 809, 3, 2,
	2, 2, 826, 810, 3, 2, 2, 2, 826, 811, 3, 2, 2, 2, 826, 812, 3, 2, 2, 2,
	826, 813, 3, 2, 2, 2, 826, 814, 3, 2, 2, 2, 826, 815, 3, 2, 2, 2, 826,
	816, 3, 2, 2, 2, 826, 817, 3, 2, 2, 2, 826, 818, 3, 2, 2, 2, 826, 819,
	3, 2, 2, 2, 826, 820, 3, 2, 2, 2, 826, 821, 3, 2, 2, 2, 826, 822, 3, 2,
	2, 2, 826, 823, 3, 2, 2, 2, 826, 824, 3, 2, 2, 2, 826, 825, 3, 2, 2, 2,
	827, 131, 3, 2, 2, 2, 828, 831, 5, 134, 68, 2, 829, 831, 5, 160, 81, 2,
	830, 828, 3, 2, 2, 2, 830, 829, 3, 2, 2, 2, 831, 133, 3, 2, 2, 2, 832,
	837, 7, 48, 2, 2, 833, 837, 7, 36, 2, 2, 834, 837, 7, 54, 2, 2, 835, 837,
	5, 170, 86, 2, 836, 832, 3, 2, 2, 2, 836, 833, 3, 2, 2, 2, 836, 834, 3,
	2, 2, 2, 836, 835, 3, 2, 2, 2, 837, 850, 3, 2, 2, 2, 838, 840, 7, 23, 2,
	2, 839, 841, 5, 132, 67, 2, 840, 839, 3, 2, 2, 2, 840, 841, 3, 2, 2, 2,
	841, 846, 3, 2, 2, 2, 842, 843, 7, 17, 2, 2, 843, 845, 5, 132, 67, 2, 844,
	842, 3, 2, 2, 2, 845, 848, 3, 2, 2, 2, 846, 844, 3, 2, 2, 2, 846, 847,
	3, 2, 2, 2, 847, 849, 3, 2, 2, 2, 848, 846, 3, 2, 2, 2, 849, 851, 7, 24,
	2, 2, 850, 838, 3, 2, 2, 2, 850, 851, 3, 2, 2, 2, 851, 135, 3, 2, 2, 2,
	852, 853, 7, 86, 2, 2, 853, 856, 5, 140, 71, 2, 854, 855, 7, 87, 2, 2,
	855, 857, 5, 132, 67, 2, 856, 854, 3, 2, 2, 2, 856, 857, 3, 2, 2, 2, 857,
	137, 3, 2, 2, 2, 858, 859, 5, 140, 71, 2, 859, 860, 7, 87, 2, 2, 860, 861,
	5, 132, 67, 2, 861, 139, 3, 2, 2, 2, 862, 868, 5, 170, 86, 2, 863, 864,
	7, 23, 2, 2, 864, 865, 5, 142, 72, 2, 865, 866, 7, 24, 2, 2, 866, 868,
	3, 2, 2, 2, 867, 862, 3, 2, 2, 2, 867, 863, 3, 2, 2, 2, 868, 141, 3, 2,
	2, 2, 869, 874, 5, 170, 86, 2, 870, 871, 7, 17, 2, 2, 871, 873, 5, 170,
	86, 2, 872, 870, 3, 2, 2, 2, 873, 876, 3, 2, 2, 2, 874, 872, 3, 2, 2, 2,
	874, 875, 3, 2, 2, 2, 875, 143, 3, 2, 2, 2, 876, 874, 3, 2, 2, 2, 877,
	878, 7, 88, 2, 2, 878, 879, 5, 170, 86, 2, 879, 145, 3, 2, 2, 2, 880, 881,
	5, 170, 86, 2, 881, 882, 7, 75, 2, 2, 882, 147, 3, 2, 2, 2, 883, 884, 7,
	89, 2, 2, 884, 888, 5, 132, 67, 2, 885, 887, 5, 150, 76, 2, 886, 885, 3,
	2, 2, 2, 887, 890, 3, 2, 2, 2, 888, 886, 3, 2, 2, 2, 888, 889, 3, 2, 2,
	2, 889, 149, 3, 2, 2, 2, 890, 888, 3, 2, 2, 2, 891, 892, 7, 90, 2, 2, 892,
	893, 5, 160, 81, 2, 893, 894, 5, 128, 65, 2, 894, 898, 3, 2, 2, 2, 895,
	896, 7, 91, 2, 2, 896, 898, 5, 128, 65, 2, 897, 891, 3, 2, 2, 2, 897, 895,
	3, 2, 2, 2, 898, 151, 3, 2, 2, 2, 899, 900, 7, 30, 2, 2, 900, 901, 5, 170,
	86, 2, 901, 903, 7, 23, 2, 2, 902, 904, 5, 142, 72, 2, 903, 902, 3, 2,
	2, 2, 903, 904, 3, 2, 2, 2, 904, 905, 3, 2, 2, 2, 905, 907, 7, 24, 2, 2,
	906, 908, 5, 154, 78, 2, 907, 906, 3, 2, 2, 2, 907, 908, 3, 2, 2, 2, 908,
	909, 3, 2, 2, 2, 909, 910, 5, 128, 65, 2, 910, 153, 3, 2, 2, 2, 911, 912,
	7, 92, 2, 2, 912, 913, 5, 142, 72, 2, 913, 155, 3, 2, 2, 2, 914, 917, 7,
	26, 2, 2, 915, 918, 5, 128, 65, 2, 916, 918, 5, 132, 67, 2, 917, 915, 3,
	2, 2, 2, 917, 916, 3, 2, 2, 2, 918, 919, 3, 2, 2, 2, 919, 922, 5, 132,
	67, 2, 920, 923, 5, 128, 65, 2, 921, 923, 5, 132, 67, 2, 922, 920, 3, 2,
	2, 2, 922, 921, 3, 2, 2, 2, 923, 924, 3, 2, 2, 2, 924, 925, 5, 128, 65,
	2, 925, 157, 3, 2, 2, 2, 926, 927, 7, 43, 2, 2, 927, 928, 5, 132, 67, 2,
	928, 929, 5, 128, 65, 2, 929, 159, 3, 2, 2, 2, 930, 931, 9, 17, 2, 2, 931,
	161, 3, 2, 2, 2, 932, 933, 7, 46, 2, 2, 933, 934, 5, 170, 86, 2, 934, 935,
	5, 128, 65, 2, 935, 163, 3, 2, 2, 2, 936, 938, 7, 23, 2, 2, 937, 939, 5,
	114, 58, 2, 938, 937, 3, 2, 2, 2, 938, 939, 3, 2, 2, 2, 939, 946, 3, 2,
	2, 2, 940, 942, 7, 17, 2, 2, 941, 943, 5, 114, 58, 2, 942, 941, 3, 2, 2,
	2, 942, 943, 3, 2, 2, 2, 943, 945, 3, 2, 2, 2, 944, 940, 3, 2, 2, 2, 945,
	948, 3, 2, 2, 2, 946, 944, 3, 2, 2, 2, 946, 947, 3, 2, 2, 2, 947, 949,
	3, 2, 2, 2, 948, 946, 3, 2, 2, 2, 949, 963, 7, 24, 2, 2, 950, 959, 7, 34,
	2, 2, 951, 956, 5, 114, 58, 2, 952, 953, 7, 17, 2, 2, 953, 955, 5, 114,
	58, 2, 954, 952, 3, 2, 2, 2, 955, 958, 3, 2, 2, 2, 956, 954, 3, 2, 2, 2,
	956, 957, 3, 2, 2, 2, 957, 960, 3, 2, 2, 2, 958, 956, 3, 2, 2, 2, 959,
	951, 3, 2, 2, 2, 959, 960, 3, 2, 2, 2, 960, 961, 3, 2, 2, 2, 961, 963,
	7, 35, 2, 2, 962, 936, 3, 2, 2, 2, 962, 950, 3, 2, 2, 2, 963, 165, 3, 2,
	2, 2, 964, 967, 5, 112, 57, 2, 965, 967, 5, 68, 35, 2, 966, 964, 3, 2,
	2, 2, 966, 965, 3, 2, 2, 2, 967, 167, 3, 2, 2, 2, 968, 970, 9, 18, 2, 2,
	969, 971, 7, 104, 2, 2, 970, 969, 3, 2, 2, 2, 970, 971, 3, 2, 2, 2, 971,
	169, 3, 2, 2, 2, 972, 973, 9, 19, 2, 2, 973, 171, 3, 2, 2, 2, 110, 175,
	177, 191, 195, 200, 207, 213, 219, 223, 235, 243, 248, 258, 261, 267, 275,
	278, 288, 294, 300, 309, 323, 326, 338, 345, 348, 351, 355, 360, 364, 375,
	377, 381, 387, 397, 403, 414, 417, 423, 426, 434, 437, 443, 446, 454, 457,
	463, 467, 478, 483, 488, 496, 511, 513, 518, 528, 545, 557, 567, 573, 577,
	580, 587, 607, 625, 629, 634, 638, 642, 647, 652, 656, 680, 739, 741, 751,
	758, 760, 767, 775, 779, 787, 791, 793, 804, 826, 830, 836, 840, 846, 850,
	856, 867, 874, 888, 897, 903, 907, 917, 922, 938, 942, 946, 956, 959, 962,
	966, 970,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "'pragma'", "';'", "'^'", "'~'", "'>='", "'>'", "'<'", "'<='", "'='",
	"'as'", "'import'", "'*'", "'from'", "'{'", "','", "'}'", "'contract'",
	"'interface'", "'library'", "'is'", "'('", "')'", "'using'", "'for'", "'struct'",
	"'constructor'", "'modifier'", "'function'", "'returns'", "'event'", "'enum'",
	"'['", "']'", "'address'", "'.'", "'mapping'", "'=>'", "'memory'", "'storage'",
	"'calldata'", "'if'", "'else'", "'while'", "'assembly'", "'do'", "'return'",
	"'throw'", "'emit'", "'var'", "'bool'", "'string'", "'byte'", "'++'", "'--'",
	"'new'", "'+'", "'-'", "'after'", "'delete'", "'!'", "'**'", "'/'", "'%'",
	"'<<'", "'>>'", "'&'", "'|'", "'=='", "'!='", "'&&'", "'||'", "'?'", "':'",
	"'|='", "'^='", "'&='", "'<<='", "'>>='", "'+='", "'-='", "'*='", "'/='",
	"'%='", "'let'", "':='", "'=:'", "'switch'", "'case'", "'default'", "'->'",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "'anonymous'",
	"'break'", "'constant'", "'continue'", "'external'", "'indexed'", "'internal'",
	"'payable'", "'private'", "'public'", "'pure'", "'type'", "'view'",
}
var symbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "NatSpecSingleLine", "NatSpecMultiLine", "Int", "Uint", "Byte", "Fixed",
	"Ufixed", "VersionLiteral", "BooleanLiteral", "DecimalNumber", "HexNumber",
	"NumberUnit", "HexLiteral", "ReservedKeyword", "AnonymousKeyword", "BreakKeyword",
	"ConstantKeyword", "ContinueKeyword", "ExternalKeyword", "IndexedKeyword",
	"InternalKeyword", "PayableKeyword", "PrivateKeyword", "PublicKeyword",
	"PureKeyword", "TypeKeyword", "ViewKeyword", "Identifier", "StringLiteral",
	"WS", "COMMENT", "LINE_COMMENT",
}

var ruleNames = []string{
	"sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", "version",
	"versionOperator", "versionConstraint", "importDeclaration", "importDirective",
	"natSpec", "contractDefinition", "inheritanceSpecifier", "contractPart",
	"stateVariableDeclaration", "usingForDeclaration", "structDefinition",
	"constructorDefinition", "modifierDefinition", "modifierInvocation", "functionDefinition",
	"returnParameters", "modifierList", "eventDefinition", "enumValue", "enumDefinition",
	"parameterList", "parameter", "eventParameterList", "eventParameter", "functionTypeParameterList",
	"functionTypeParameter", "variableDeclaration", "typeName", "userDefinedTypeName",
	"mapping", "functionTypeName", "storageLocation", "stateMutability", "block",
	"statement", "expressionStatement", "ifStatement", "whileStatement", "simpleStatement",
	"forStatement", "inlineAssemblyStatement", "doWhileStatement", "continueStatement",
	"breakStatement", "returnStatement", "throwStatement", "emitStatement",
	"variableDeclarationStatement", "variableDeclarationList", "identifierList",
	"elementaryTypeName", "expression", "primaryExpression", "expressionList",
	"nameValueList", "nameValue", "functionCallArguments", "functionCall",
	"assemblyBlock", "assemblyItem", "assemblyExpression", "assemblyCall",
	"assemblyLocalDefinition", "assemblyAssignment", "assemblyIdentifierOrList",
	"assemblyIdentifierList", "assemblyStackAssignment", "labelDefinition",
	"assemblySwitch", "assemblyCase", "assemblyFunctionDefinition", "assemblyFunctionReturns",
	"assemblyFor", "assemblyIf", "assemblyLiteral", "subAssembly", "tupleExpression",
	"typeNameExpression", "numberLiteral", "identifier",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type SolidityParser struct {
	*antlr.BaseParser
}

func NewSolidityParser(input antlr.TokenStream) *SolidityParser {
	this := new(SolidityParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "Solidity.g4"

	return this
}

// SolidityParser tokens.
const (
	SolidityParserEOF               = antlr.TokenEOF
	SolidityParserT__0              = 1
	SolidityParserT__1              = 2
	SolidityParserT__2              = 3
	SolidityParserT__3              = 4
	SolidityParserT__4              = 5
	SolidityParserT__5              = 6
	SolidityParserT__6              = 7
	SolidityParserT__7              = 8
	SolidityParserT__8              = 9
	SolidityParserT__9              = 10
	SolidityParserT__10             = 11
	SolidityParserT__11             = 12
	SolidityParserT__12             = 13
	SolidityParserT__13             = 14
	SolidityParserT__14             = 15
	SolidityParserT__15             = 16
	SolidityParserT__16             = 17
	SolidityParserT__17             = 18
	SolidityParserT__18             = 19
	SolidityParserT__19             = 20
	SolidityParserT__20             = 21
	SolidityParserT__21             = 22
	SolidityParserT__22             = 23
	SolidityParserT__23             = 24
	SolidityParserT__24             = 25
	SolidityParserT__25             = 26
	SolidityParserT__26             = 27
	SolidityParserT__27             = 28
	SolidityParserT__28             = 29
	SolidityParserT__29             = 30
	SolidityParserT__30             = 31
	SolidityParserT__31             = 32
	SolidityParserT__32             = 33
	SolidityParserT__33             = 34
	SolidityParserT__34             = 35
	SolidityParserT__35             = 36
	SolidityParserT__36             = 37
	SolidityParserT__37             = 38
	SolidityParserT__38             = 39
	SolidityParserT__39             = 40
	SolidityParserT__40             = 41
	SolidityParserT__41             = 42
	SolidityParserT__42             = 43
	SolidityParserT__43             = 44
	SolidityParserT__44             = 45
	SolidityParserT__45             = 46
	SolidityParserT__46             = 47
	SolidityParserT__47             = 48
	SolidityParserT__48             = 49
	SolidityParserT__49             = 50
	SolidityParserT__50             = 51
	SolidityParserT__51             = 52
	SolidityParserT__52             = 53
	SolidityParserT__53             = 54
	SolidityParserT__54             = 55
	SolidityParserT__55             = 56
	SolidityParserT__56             = 57
	SolidityParserT__57             = 58
	SolidityParserT__58             = 59
	SolidityParserT__59             = 60
	SolidityParserT__60             = 61
	SolidityParserT__61             = 62
	SolidityParserT__62             = 63
	SolidityParserT__63             = 64
	SolidityParserT__64             = 65
	SolidityParserT__65             = 66
	SolidityParserT__66             = 67
	SolidityParserT__67             = 68
	SolidityParserT__68             = 69
	SolidityParserT__69             = 70
	SolidityParserT__70             = 71
	SolidityParserT__71             = 72
	SolidityParserT__72             = 73
	SolidityParserT__73             = 74
	SolidityParserT__74             = 75
	SolidityParserT__75             = 76
	SolidityParserT__76             = 77
	SolidityParserT__77             = 78
	SolidityParserT__78             = 79
	SolidityParserT__79             = 80
	SolidityParserT__80             = 81
	SolidityParserT__81             = 82
	SolidityParserT__82             = 83
	SolidityParserT__83             = 84
	SolidityParserT__84             = 85
	SolidityParserT__85             = 86
	SolidityParserT__86             = 87
	SolidityParserT__87             = 88
	SolidityParserT__88             = 89
	SolidityParserT__89             = 90
	SolidityParserNatSpecSingleLine = 91
	SolidityParserNatSpecMultiLine  = 92
	SolidityParserInt               = 93
	SolidityParserUint              = 94
	SolidityParserByte              = 95
	SolidityParserFixed             = 96
	SolidityParserUfixed            = 97
	SolidityParserVersionLiteral    = 98
	SolidityParserBooleanLiteral    = 99
	SolidityParserDecimalNumber     = 100
	SolidityParserHexNumber         = 101
	SolidityParserNumberUnit        = 102
	SolidityParserHexLiteral        = 103
	SolidityParserReservedKeyword   = 104
	SolidityParserAnonymousKeyword  = 105
	SolidityParserBreakKeyword      = 106
	SolidityParserConstantKeyword   = 107
	SolidityParserContinueKeyword   = 108
	SolidityParserExternalKeyword   = 109
	SolidityParserIndexedKeyword    = 110
	SolidityParserInternalKeyword   = 111
	SolidityParserPayableKeyword    = 112
	SolidityParserPrivateKeyword    = 113
	SolidityParserPublicKeyword     = 114
	SolidityParserPureKeyword       = 115
	SolidityParserTypeKeyword       = 116
	SolidityParserViewKeyword       = 117
	SolidityParserIdentifier        = 118
	SolidityParserStringLiteral     = 119
	SolidityParserWS                = 120
	SolidityParserCOMMENT           = 121
	SolidityParserLINE_COMMENT      = 122
)

// SolidityParser rules.
const (
	SolidityParserRULE_sourceUnit                   = 0
	SolidityParserRULE_pragmaDirective              = 1
	SolidityParserRULE_pragmaName                   = 2
	SolidityParserRULE_pragmaValue                  = 3
	SolidityParserRULE_version                      = 4
	SolidityParserRULE_versionOperator              = 5
	SolidityParserRULE_versionConstraint            = 6
	SolidityParserRULE_importDeclaration            = 7
	SolidityParserRULE_importDirective              = 8
	SolidityParserRULE_natSpec                      = 9
	SolidityParserRULE_contractDefinition           = 10
	SolidityParserRULE_inheritanceSpecifier         = 11
	SolidityParserRULE_contractPart                 = 12
	SolidityParserRULE_stateVariableDeclaration     = 13
	SolidityParserRULE_usingForDeclaration          = 14
	SolidityParserRULE_structDefinition             = 15
	SolidityParserRULE_constructorDefinition        = 16
	SolidityParserRULE_modifierDefinition           = 17
	SolidityParserRULE_modifierInvocation           = 18
	SolidityParserRULE_functionDefinition           = 19
	SolidityParserRULE_returnParameters             = 20
	SolidityParserRULE_modifierList                 = 21
	SolidityParserRULE_eventDefinition              = 22
	SolidityParserRULE_enumValue                    = 23
	SolidityParserRULE_enumDefinition               = 24
	SolidityParserRULE_parameterList                = 25
	SolidityParserRULE_parameter                    = 26
	SolidityParserRULE_eventParameterList           = 27
	SolidityParserRULE_eventParameter               = 28
	SolidityParserRULE_functionTypeParameterList    = 29
	SolidityParserRULE_functionTypeParameter        = 30
	SolidityParserRULE_variableDeclaration          = 31
	SolidityParserRULE_typeName                     = 32
	SolidityParserRULE_userDefinedTypeName          = 33
	SolidityParserRULE_mapping                      = 34
	SolidityParserRULE_functionTypeName             = 35
	SolidityParserRULE_storageLocation              = 36
	SolidityParserRULE_stateMutability              = 37
	SolidityParserRULE_block                        = 38
	SolidityParserRULE_statement                    = 39
	SolidityParserRULE_expressionStatement          = 40
	SolidityParserRULE_ifStatement                  = 41
	SolidityParserRULE_whileStatement               = 42
	SolidityParserRULE_simpleStatement              = 43
	SolidityParserRULE_forStatement                 = 44
	SolidityParserRULE_inlineAssemblyStatement      = 45
	SolidityParserRULE_doWhileStatement             = 46
	SolidityParserRULE_continueStatement            = 47
	SolidityParserRULE_breakStatement               = 48
	SolidityParserRULE_returnStatement              = 49
	SolidityParserRULE_throwStatement               = 50
	SolidityParserRULE_emitStatement                = 51
	SolidityParserRULE_variableDeclarationStatement = 52
	SolidityParserRULE_variableDeclarationList      = 53
	SolidityParserRULE_identifierList               = 54
	SolidityParserRULE_elementaryTypeName           = 55
	SolidityParserRULE_expression                   = 56
	SolidityParserRULE_primaryExpression            = 57
	SolidityParserRULE_expressionList               = 58
	SolidityParserRULE_nameValueList                = 59
	SolidityParserRULE_nameValue                    = 60
	SolidityParserRULE_functionCallArguments        = 61
	SolidityParserRULE_functionCall                 = 62
	SolidityParserRULE_assemblyBlock                = 63
	SolidityParserRULE_assemblyItem                 = 64
	SolidityParserRULE_assemblyExpression           = 65
	SolidityParserRULE_assemblyCall                 = 66
	SolidityParserRULE_assemblyLocalDefinition      = 67
	SolidityParserRULE_assemblyAssignment           = 68
	SolidityParserRULE_assemblyIdentifierOrList     = 69
	SolidityParserRULE_assemblyIdentifierList       = 70
	SolidityParserRULE_assemblyStackAssignment      = 71
	SolidityParserRULE_labelDefinition              = 72
	SolidityParserRULE_assemblySwitch               = 73
	SolidityParserRULE_assemblyCase                 = 74
	SolidityParserRULE_assemblyFunctionDefinition   = 75
	SolidityParserRULE_assemblyFunctionReturns      = 76
	SolidityParserRULE_assemblyFor                  = 77
	SolidityParserRULE_assemblyIf                   = 78
	SolidityParserRULE_assemblyLiteral              = 79
	SolidityParserRULE_subAssembly                  = 80
	SolidityParserRULE_tupleExpression              = 81
	SolidityParserRULE_typeNameExpression           = 82
	SolidityParserRULE_numberLiteral                = 83
	SolidityParserRULE_identifier                   = 84
)

// ISourceUnitContext is an interface to support dynamic dispatch.
type ISourceUnitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSourceUnitContext differentiates from other interfaces.
	IsSourceUnitContext()
}

type SourceUnitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySourceUnitContext() *SourceUnitContext {
	var p = new(SourceUnitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_sourceUnit
	return p
}

func (*SourceUnitContext) IsSourceUnitContext() {}

func NewSourceUnitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SourceUnitContext {
	var p = new(SourceUnitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_sourceUnit

	return p
}

func (s *SourceUnitContext) GetParser() antlr.Parser { return s.parser }

func (s *SourceUnitContext) EOF() antlr.TerminalNode {
	return s.GetToken(SolidityParserEOF, 0)
}

func (s *SourceUnitContext) AllPragmaDirective() []IPragmaDirectiveContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPragmaDirectiveContext)(nil)).Elem())
	var tst = make([]IPragmaDirectiveContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPragmaDirectiveContext)
		}
	}

	return tst
}

func (s *SourceUnitContext) PragmaDirective(i int) IPragmaDirectiveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPragmaDirectiveContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPragmaDirectiveContext)
}

func (s *SourceUnitContext) AllImportDirective() []IImportDirectiveContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IImportDirectiveContext)(nil)).Elem())
	var tst = make([]IImportDirectiveContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IImportDirectiveContext)
		}
	}

	return tst
}

func (s *SourceUnitContext) ImportDirective(i int) IImportDirectiveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportDirectiveContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IImportDirectiveContext)
}

func (s *SourceUnitContext) AllContractDefinition() []IContractDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IContractDefinitionContext)(nil)).Elem())
	var tst = make([]IContractDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IContractDefinitionContext)
		}
	}

	return tst
}

func (s *SourceUnitContext) ContractDefinition(i int) IContractDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContractDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IContractDefinitionContext)
}

func (s *SourceUnitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SourceUnitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SourceUnitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterSourceUnit(s)
	}
}

func (s *SourceUnitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitSourceUnit(s)
	}
}

func (p *SolidityParser) SourceUnit() (localctx ISourceUnitContext) {
	localctx = NewSourceUnitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, SolidityParserRULE_sourceUnit)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(175)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__0)|(1<<SolidityParserT__10)|(1<<SolidityParserT__16)|(1<<SolidityParserT__17)|(1<<SolidityParserT__18))) != 0) || _la == SolidityParserNatSpecSingleLine || _la == SolidityParserNatSpecMultiLine {
		p.SetState(173)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SolidityParserT__0:
			{
				p.SetState(170)
				p.PragmaDirective()
			}

		case SolidityParserT__10:
			{
				p.SetState(171)
				p.ImportDirective()
			}

		case SolidityParserT__16, SolidityParserT__17, SolidityParserT__18, SolidityParserNatSpecSingleLine, SolidityParserNatSpecMultiLine:
			{
				p.SetState(172)
				p.ContractDefinition()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(177)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(178)
		p.Match(SolidityParserEOF)
	}

	return localctx
}

// IPragmaDirectiveContext is an interface to support dynamic dispatch.
type IPragmaDirectiveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPragmaDirectiveContext differentiates from other interfaces.
	IsPragmaDirectiveContext()
}

type PragmaDirectiveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPragmaDirectiveContext() *PragmaDirectiveContext {
	var p = new(PragmaDirectiveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_pragmaDirective
	return p
}

func (*PragmaDirectiveContext) IsPragmaDirectiveContext() {}

func NewPragmaDirectiveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PragmaDirectiveContext {
	var p = new(PragmaDirectiveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_pragmaDirective

	return p
}

func (s *PragmaDirectiveContext) GetParser() antlr.Parser { return s.parser }

func (s *PragmaDirectiveContext) PragmaName() IPragmaNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPragmaNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPragmaNameContext)
}

func (s *PragmaDirectiveContext) PragmaValue() IPragmaValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPragmaValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPragmaValueContext)
}

func (s *PragmaDirectiveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PragmaDirectiveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PragmaDirectiveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterPragmaDirective(s)
	}
}

func (s *PragmaDirectiveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitPragmaDirective(s)
	}
}

func (p *SolidityParser) PragmaDirective() (localctx IPragmaDirectiveContext) {
	localctx = NewPragmaDirectiveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, SolidityParserRULE_pragmaDirective)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(180)
		p.Match(SolidityParserT__0)
	}
	{
		p.SetState(181)
		p.PragmaName()
	}
	{
		p.SetState(182)
		p.PragmaValue()
	}
	{
		p.SetState(183)
		p.Match(SolidityParserT__1)
	}

	return localctx
}

// IPragmaNameContext is an interface to support dynamic dispatch.
type IPragmaNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPragmaNameContext differentiates from other interfaces.
	IsPragmaNameContext()
}

type PragmaNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPragmaNameContext() *PragmaNameContext {
	var p = new(PragmaNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_pragmaName
	return p
}

func (*PragmaNameContext) IsPragmaNameContext() {}

func NewPragmaNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PragmaNameContext {
	var p = new(PragmaNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_pragmaName

	return p
}

func (s *PragmaNameContext) GetParser() antlr.Parser { return s.parser }

func (s *PragmaNameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *PragmaNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PragmaNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PragmaNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterPragmaName(s)
	}
}

func (s *PragmaNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitPragmaName(s)
	}
}

func (p *SolidityParser) PragmaName() (localctx IPragmaNameContext) {
	localctx = NewPragmaNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, SolidityParserRULE_pragmaName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(185)
		p.Identifier()
	}

	return localctx
}

// IPragmaValueContext is an interface to support dynamic dispatch.
type IPragmaValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPragmaValueContext differentiates from other interfaces.
	IsPragmaValueContext()
}

type PragmaValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPragmaValueContext() *PragmaValueContext {
	var p = new(PragmaValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_pragmaValue
	return p
}

func (*PragmaValueContext) IsPragmaValueContext() {}

func NewPragmaValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PragmaValueContext {
	var p = new(PragmaValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_pragmaValue

	return p
}

func (s *PragmaValueContext) GetParser() antlr.Parser { return s.parser }

func (s *PragmaValueContext) Version() IVersionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVersionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVersionContext)
}

func (s *PragmaValueContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PragmaValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PragmaValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PragmaValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterPragmaValue(s)
	}
}

func (s *PragmaValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitPragmaValue(s)
	}
}

func (p *SolidityParser) PragmaValue() (localctx IPragmaValueContext) {
	localctx = NewPragmaValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, SolidityParserRULE_pragmaValue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(189)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 2, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(187)
			p.Version()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(188)
			p.expression(0)
		}

	}

	return localctx
}

// IVersionContext is an interface to support dynamic dispatch.
type IVersionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVersionContext differentiates from other interfaces.
	IsVersionContext()
}

type VersionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVersionContext() *VersionContext {
	var p = new(VersionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_version
	return p
}

func (*VersionContext) IsVersionContext() {}

func NewVersionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VersionContext {
	var p = new(VersionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_version

	return p
}

func (s *VersionContext) GetParser() antlr.Parser { return s.parser }

func (s *VersionContext) AllVersionConstraint() []IVersionConstraintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVersionConstraintContext)(nil)).Elem())
	var tst = make([]IVersionConstraintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVersionConstraintContext)
		}
	}

	return tst
}

func (s *VersionContext) VersionConstraint(i int) IVersionConstraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVersionConstraintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVersionConstraintContext)
}

func (s *VersionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VersionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VersionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterVersion(s)
	}
}

func (s *VersionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitVersion(s)
	}
}

func (p *SolidityParser) Version() (localctx IVersionContext) {
	localctx = NewVersionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, SolidityParserRULE_version)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(191)
		p.VersionConstraint()
	}
	p.SetState(193)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__2)|(1<<SolidityParserT__3)|(1<<SolidityParserT__4)|(1<<SolidityParserT__5)|(1<<SolidityParserT__6)|(1<<SolidityParserT__7)|(1<<SolidityParserT__8))) != 0) || _la == SolidityParserVersionLiteral {
		{
			p.SetState(192)
			p.VersionConstraint()
		}

	}

	return localctx
}

// IVersionOperatorContext is an interface to support dynamic dispatch.
type IVersionOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVersionOperatorContext differentiates from other interfaces.
	IsVersionOperatorContext()
}

type VersionOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVersionOperatorContext() *VersionOperatorContext {
	var p = new(VersionOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_versionOperator
	return p
}

func (*VersionOperatorContext) IsVersionOperatorContext() {}

func NewVersionOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VersionOperatorContext {
	var p = new(VersionOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_versionOperator

	return p
}

func (s *VersionOperatorContext) GetParser() antlr.Parser { return s.parser }
func (s *VersionOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VersionOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VersionOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterVersionOperator(s)
	}
}

func (s *VersionOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitVersionOperator(s)
	}
}

func (p *SolidityParser) VersionOperator() (localctx IVersionOperatorContext) {
	localctx = NewVersionOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, SolidityParserRULE_versionOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(195)
		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__2)|(1<<SolidityParserT__3)|(1<<SolidityParserT__4)|(1<<SolidityParserT__5)|(1<<SolidityParserT__6)|(1<<SolidityParserT__7)|(1<<SolidityParserT__8))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IVersionConstraintContext is an interface to support dynamic dispatch.
type IVersionConstraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVersionConstraintContext differentiates from other interfaces.
	IsVersionConstraintContext()
}

type VersionConstraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVersionConstraintContext() *VersionConstraintContext {
	var p = new(VersionConstraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_versionConstraint
	return p
}

func (*VersionConstraintContext) IsVersionConstraintContext() {}

func NewVersionConstraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VersionConstraintContext {
	var p = new(VersionConstraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_versionConstraint

	return p
}

func (s *VersionConstraintContext) GetParser() antlr.Parser { return s.parser }

func (s *VersionConstraintContext) VersionLiteral() antlr.TerminalNode {
	return s.GetToken(SolidityParserVersionLiteral, 0)
}

func (s *VersionConstraintContext) VersionOperator() IVersionOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVersionOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVersionOperatorContext)
}

func (s *VersionConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VersionConstraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VersionConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterVersionConstraint(s)
	}
}

func (s *VersionConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitVersionConstraint(s)
	}
}

func (p *SolidityParser) VersionConstraint() (localctx IVersionConstraintContext) {
	localctx = NewVersionConstraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, SolidityParserRULE_versionConstraint)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(198)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__2)|(1<<SolidityParserT__3)|(1<<SolidityParserT__4)|(1<<SolidityParserT__5)|(1<<SolidityParserT__6)|(1<<SolidityParserT__7)|(1<<SolidityParserT__8))) != 0 {
		{
			p.SetState(197)
			p.VersionOperator()
		}

	}
	{
		p.SetState(200)
		p.Match(SolidityParserVersionLiteral)
	}

	return localctx
}

// IImportDeclarationContext is an interface to support dynamic dispatch.
type IImportDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportDeclarationContext differentiates from other interfaces.
	IsImportDeclarationContext()
}

type ImportDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportDeclarationContext() *ImportDeclarationContext {
	var p = new(ImportDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_importDeclaration
	return p
}

func (*ImportDeclarationContext) IsImportDeclarationContext() {}

func NewImportDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportDeclarationContext {
	var p = new(ImportDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_importDeclaration

	return p
}

func (s *ImportDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportDeclarationContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *ImportDeclarationContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ImportDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterImportDeclaration(s)
	}
}

func (s *ImportDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitImportDeclaration(s)
	}
}

func (p *SolidityParser) ImportDeclaration() (localctx IImportDeclarationContext) {
	localctx = NewImportDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, SolidityParserRULE_importDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(202)
		p.Identifier()
	}
	p.SetState(205)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__9 {
		{
			p.SetState(203)
			p.Match(SolidityParserT__9)
		}
		{
			p.SetState(204)
			p.Identifier()
		}

	}

	return localctx
}

// IImportDirectiveContext is an interface to support dynamic dispatch.
type IImportDirectiveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportDirectiveContext differentiates from other interfaces.
	IsImportDirectiveContext()
}

type ImportDirectiveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportDirectiveContext() *ImportDirectiveContext {
	var p = new(ImportDirectiveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_importDirective
	return p
}

func (*ImportDirectiveContext) IsImportDirectiveContext() {}

func NewImportDirectiveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportDirectiveContext {
	var p = new(ImportDirectiveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_importDirective

	return p
}

func (s *ImportDirectiveContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportDirectiveContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(SolidityParserStringLiteral, 0)
}

func (s *ImportDirectiveContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *ImportDirectiveContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ImportDirectiveContext) AllImportDeclaration() []IImportDeclarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IImportDeclarationContext)(nil)).Elem())
	var tst = make([]IImportDeclarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IImportDeclarationContext)
		}
	}

	return tst
}

func (s *ImportDirectiveContext) ImportDeclaration(i int) IImportDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportDeclarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IImportDeclarationContext)
}

func (s *ImportDirectiveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportDirectiveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportDirectiveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterImportDirective(s)
	}
}

func (s *ImportDirectiveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitImportDirective(s)
	}
}

func (p *SolidityParser) ImportDirective() (localctx IImportDirectiveContext) {
	localctx = NewImportDirectiveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, SolidityParserRULE_importDirective)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(241)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(207)
			p.Match(SolidityParserT__10)
		}
		{
			p.SetState(208)
			p.Match(SolidityParserStringLiteral)
		}
		p.SetState(211)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SolidityParserT__9 {
			{
				p.SetState(209)
				p.Match(SolidityParserT__9)
			}
			{
				p.SetState(210)
				p.Identifier()
			}

		}
		{
			p.SetState(213)
			p.Match(SolidityParserT__1)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(214)
			p.Match(SolidityParserT__10)
		}
		p.SetState(217)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SolidityParserT__11:
			{
				p.SetState(215)
				p.Match(SolidityParserT__11)
			}

		case SolidityParserT__12, SolidityParserT__39, SolidityParserIdentifier:
			{
				p.SetState(216)
				p.Identifier()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(221)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SolidityParserT__9 {
			{
				p.SetState(219)
				p.Match(SolidityParserT__9)
			}
			{
				p.SetState(220)
				p.Identifier()
			}

		}
		{
			p.SetState(223)
			p.Match(SolidityParserT__12)
		}
		{
			p.SetState(224)
			p.Match(SolidityParserStringLiteral)
		}
		{
			p.SetState(225)
			p.Match(SolidityParserT__1)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(226)
			p.Match(SolidityParserT__10)
		}
		{
			p.SetState(227)
			p.Match(SolidityParserT__13)
		}
		{
			p.SetState(228)
			p.ImportDeclaration()
		}
		p.SetState(233)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SolidityParserT__14 {
			{
				p.SetState(229)
				p.Match(SolidityParserT__14)
			}
			{
				p.SetState(230)
				p.ImportDeclaration()
			}

			p.SetState(235)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(236)
			p.Match(SolidityParserT__15)
		}
		{
			p.SetState(237)
			p.Match(SolidityParserT__12)
		}
		{
			p.SetState(238)
			p.Match(SolidityParserStringLiteral)
		}
		{
			p.SetState(239)
			p.Match(SolidityParserT__1)
		}

	}

	return localctx
}

// INatSpecContext is an interface to support dynamic dispatch.
type INatSpecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNatSpecContext differentiates from other interfaces.
	IsNatSpecContext()
}

type NatSpecContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNatSpecContext() *NatSpecContext {
	var p = new(NatSpecContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_natSpec
	return p
}

func (*NatSpecContext) IsNatSpecContext() {}

func NewNatSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NatSpecContext {
	var p = new(NatSpecContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_natSpec

	return p
}

func (s *NatSpecContext) GetParser() antlr.Parser { return s.parser }

func (s *NatSpecContext) NatSpecSingleLine() antlr.TerminalNode {
	return s.GetToken(SolidityParserNatSpecSingleLine, 0)
}

func (s *NatSpecContext) NatSpecMultiLine() antlr.TerminalNode {
	return s.GetToken(SolidityParserNatSpecMultiLine, 0)
}

func (s *NatSpecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NatSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NatSpecContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterNatSpec(s)
	}
}

func (s *NatSpecContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitNatSpec(s)
	}
}

func (p *SolidityParser) NatSpec() (localctx INatSpecContext) {
	localctx = NewNatSpecContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, SolidityParserRULE_natSpec)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(243)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SolidityParserNatSpecSingleLine || _la == SolidityParserNatSpecMultiLine) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IContractDefinitionContext is an interface to support dynamic dispatch.
type IContractDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContractDefinitionContext differentiates from other interfaces.
	IsContractDefinitionContext()
}

type ContractDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContractDefinitionContext() *ContractDefinitionContext {
	var p = new(ContractDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_contractDefinition
	return p
}

func (*ContractDefinitionContext) IsContractDefinitionContext() {}

func NewContractDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ContractDefinitionContext {
	var p = new(ContractDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_contractDefinition

	return p
}

func (s *ContractDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ContractDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ContractDefinitionContext) NatSpec() INatSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INatSpecContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INatSpecContext)
}

func (s *ContractDefinitionContext) AllInheritanceSpecifier() []IInheritanceSpecifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInheritanceSpecifierContext)(nil)).Elem())
	var tst = make([]IInheritanceSpecifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInheritanceSpecifierContext)
		}
	}

	return tst
}

func (s *ContractDefinitionContext) InheritanceSpecifier(i int) IInheritanceSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInheritanceSpecifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInheritanceSpecifierContext)
}

func (s *ContractDefinitionContext) AllContractPart() []IContractPartContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IContractPartContext)(nil)).Elem())
	var tst = make([]IContractPartContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IContractPartContext)
		}
	}

	return tst
}

func (s *ContractDefinitionContext) ContractPart(i int) IContractPartContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContractPartContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IContractPartContext)
}

func (s *ContractDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContractDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ContractDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterContractDefinition(s)
	}
}

func (s *ContractDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitContractDefinition(s)
	}
}

func (p *SolidityParser) ContractDefinition() (localctx IContractDefinitionContext) {
	localctx = NewContractDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, SolidityParserRULE_contractDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(246)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserNatSpecSingleLine || _la == SolidityParserNatSpecMultiLine {
		{
			p.SetState(245)
			p.NatSpec()
		}

	}
	{
		p.SetState(248)
		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__16)|(1<<SolidityParserT__17)|(1<<SolidityParserT__18))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(249)
		p.Identifier()
	}
	p.SetState(259)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__19 {
		{
			p.SetState(250)
			p.Match(SolidityParserT__19)
		}
		{
			p.SetState(251)
			p.InheritanceSpecifier()
		}
		p.SetState(256)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SolidityParserT__14 {
			{
				p.SetState(252)
				p.Match(SolidityParserT__14)
			}
			{
				p.SetState(253)
				p.InheritanceSpecifier()
			}

			p.SetState(258)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(261)
		p.Match(SolidityParserT__13)
	}
	p.SetState(265)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__12)|(1<<SolidityParserT__22)|(1<<SolidityParserT__24)|(1<<SolidityParserT__25)|(1<<SolidityParserT__26)|(1<<SolidityParserT__27)|(1<<SolidityParserT__29)|(1<<SolidityParserT__30))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(SolidityParserT__33-34))|(1<<(SolidityParserT__35-34))|(1<<(SolidityParserT__39-34))|(1<<(SolidityParserT__48-34))|(1<<(SolidityParserT__49-34))|(1<<(SolidityParserT__50-34))|(1<<(SolidityParserT__51-34)))) != 0) || (((_la-91)&-(0x1f+1)) == 0 && ((1<<uint((_la-91)))&((1<<(SolidityParserNatSpecSingleLine-91))|(1<<(SolidityParserNatSpecMultiLine-91))|(1<<(SolidityParserInt-91))|(1<<(SolidityParserUint-91))|(1<<(SolidityParserByte-91))|(1<<(SolidityParserFixed-91))|(1<<(SolidityParserUfixed-91))|(1<<(SolidityParserIdentifier-91)))) != 0) {
		{
			p.SetState(262)
			p.ContractPart()
		}

		p.SetState(267)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(268)
		p.Match(SolidityParserT__15)
	}

	return localctx
}

// IInheritanceSpecifierContext is an interface to support dynamic dispatch.
type IInheritanceSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInheritanceSpecifierContext differentiates from other interfaces.
	IsInheritanceSpecifierContext()
}

type InheritanceSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInheritanceSpecifierContext() *InheritanceSpecifierContext {
	var p = new(InheritanceSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_inheritanceSpecifier
	return p
}

func (*InheritanceSpecifierContext) IsInheritanceSpecifierContext() {}

func NewInheritanceSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InheritanceSpecifierContext {
	var p = new(InheritanceSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_inheritanceSpecifier

	return p
}

func (s *InheritanceSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *InheritanceSpecifierContext) UserDefinedTypeName() IUserDefinedTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserDefinedTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserDefinedTypeNameContext)
}

func (s *InheritanceSpecifierContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *InheritanceSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InheritanceSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InheritanceSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterInheritanceSpecifier(s)
	}
}

func (s *InheritanceSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitInheritanceSpecifier(s)
	}
}

func (p *SolidityParser) InheritanceSpecifier() (localctx IInheritanceSpecifierContext) {
	localctx = NewInheritanceSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, SolidityParserRULE_inheritanceSpecifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(270)
		p.UserDefinedTypeName()
	}
	p.SetState(276)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__20 {
		{
			p.SetState(271)
			p.Match(SolidityParserT__20)
		}
		p.SetState(273)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__3)|(1<<SolidityParserT__12)|(1<<SolidityParserT__20))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(SolidityParserT__31-32))|(1<<(SolidityParserT__33-32))|(1<<(SolidityParserT__39-32))|(1<<(SolidityParserT__48-32))|(1<<(SolidityParserT__49-32))|(1<<(SolidityParserT__50-32))|(1<<(SolidityParserT__51-32))|(1<<(SolidityParserT__52-32))|(1<<(SolidityParserT__53-32))|(1<<(SolidityParserT__54-32))|(1<<(SolidityParserT__55-32))|(1<<(SolidityParserT__56-32))|(1<<(SolidityParserT__57-32))|(1<<(SolidityParserT__58-32))|(1<<(SolidityParserT__59-32)))) != 0) || (((_la-93)&-(0x1f+1)) == 0 && ((1<<uint((_la-93)))&((1<<(SolidityParserInt-93))|(1<<(SolidityParserUint-93))|(1<<(SolidityParserByte-93))|(1<<(SolidityParserFixed-93))|(1<<(SolidityParserUfixed-93))|(1<<(SolidityParserBooleanLiteral-93))|(1<<(SolidityParserDecimalNumber-93))|(1<<(SolidityParserHexNumber-93))|(1<<(SolidityParserHexLiteral-93))|(1<<(SolidityParserTypeKeyword-93))|(1<<(SolidityParserIdentifier-93))|(1<<(SolidityParserStringLiteral-93)))) != 0) {
			{
				p.SetState(272)
				p.ExpressionList()
			}

		}
		{
			p.SetState(275)
			p.Match(SolidityParserT__21)
		}

	}

	return localctx
}

// IContractPartContext is an interface to support dynamic dispatch.
type IContractPartContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContractPartContext differentiates from other interfaces.
	IsContractPartContext()
}

type ContractPartContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContractPartContext() *ContractPartContext {
	var p = new(ContractPartContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_contractPart
	return p
}

func (*ContractPartContext) IsContractPartContext() {}

func NewContractPartContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ContractPartContext {
	var p = new(ContractPartContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_contractPart

	return p
}

func (s *ContractPartContext) GetParser() antlr.Parser { return s.parser }

func (s *ContractPartContext) StateVariableDeclaration() IStateVariableDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStateVariableDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStateVariableDeclarationContext)
}

func (s *ContractPartContext) UsingForDeclaration() IUsingForDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUsingForDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUsingForDeclarationContext)
}

func (s *ContractPartContext) StructDefinition() IStructDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStructDefinitionContext)
}

func (s *ContractPartContext) ConstructorDefinition() IConstructorDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstructorDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstructorDefinitionContext)
}

func (s *ContractPartContext) ModifierDefinition() IModifierDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModifierDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModifierDefinitionContext)
}

func (s *ContractPartContext) FunctionDefinition() IFunctionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionDefinitionContext)
}

func (s *ContractPartContext) EventDefinition() IEventDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEventDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEventDefinitionContext)
}

func (s *ContractPartContext) EnumDefinition() IEnumDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumDefinitionContext)
}

func (s *ContractPartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContractPartContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ContractPartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterContractPart(s)
	}
}

func (s *ContractPartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitContractPart(s)
	}
}

func (p *SolidityParser) ContractPart() (localctx IContractPartContext) {
	localctx = NewContractPartContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, SolidityParserRULE_contractPart)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(286)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(278)
			p.StateVariableDeclaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(279)
			p.UsingForDeclaration()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(280)
			p.StructDefinition()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(281)
			p.ConstructorDefinition()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(282)
			p.ModifierDefinition()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(283)
			p.FunctionDefinition()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(284)
			p.EventDefinition()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(285)
			p.EnumDefinition()
		}

	}

	return localctx
}

// IStateVariableDeclarationContext is an interface to support dynamic dispatch.
type IStateVariableDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStateVariableDeclarationContext differentiates from other interfaces.
	IsStateVariableDeclarationContext()
}

type StateVariableDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStateVariableDeclarationContext() *StateVariableDeclarationContext {
	var p = new(StateVariableDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_stateVariableDeclaration
	return p
}

func (*StateVariableDeclarationContext) IsStateVariableDeclarationContext() {}

func NewStateVariableDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StateVariableDeclarationContext {
	var p = new(StateVariableDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_stateVariableDeclaration

	return p
}

func (s *StateVariableDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *StateVariableDeclarationContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *StateVariableDeclarationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *StateVariableDeclarationContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *StateVariableDeclarationContext) AllPublicKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserPublicKeyword)
}

func (s *StateVariableDeclarationContext) PublicKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserPublicKeyword, i)
}

func (s *StateVariableDeclarationContext) AllInternalKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserInternalKeyword)
}

func (s *StateVariableDeclarationContext) InternalKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserInternalKeyword, i)
}

func (s *StateVariableDeclarationContext) AllPrivateKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserPrivateKeyword)
}

func (s *StateVariableDeclarationContext) PrivateKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserPrivateKeyword, i)
}

func (s *StateVariableDeclarationContext) AllConstantKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserConstantKeyword)
}

func (s *StateVariableDeclarationContext) ConstantKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserConstantKeyword, i)
}

func (s *StateVariableDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StateVariableDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StateVariableDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterStateVariableDeclaration(s)
	}
}

func (s *StateVariableDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitStateVariableDeclaration(s)
	}
}

func (p *SolidityParser) StateVariableDeclaration() (localctx IStateVariableDeclarationContext) {
	localctx = NewStateVariableDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, SolidityParserRULE_stateVariableDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(288)
		p.typeName(0)
	}
	p.SetState(292)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(SolidityParserConstantKeyword-107))|(1<<(SolidityParserInternalKeyword-107))|(1<<(SolidityParserPrivateKeyword-107))|(1<<(SolidityParserPublicKeyword-107)))) != 0 {
		{
			p.SetState(289)
			_la = p.GetTokenStream().LA(1)

			if !(((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(SolidityParserConstantKeyword-107))|(1<<(SolidityParserInternalKeyword-107))|(1<<(SolidityParserPrivateKeyword-107))|(1<<(SolidityParserPublicKeyword-107)))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

		p.SetState(294)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(295)
		p.Identifier()
	}
	p.SetState(298)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__8 {
		{
			p.SetState(296)
			p.Match(SolidityParserT__8)
		}
		{
			p.SetState(297)
			p.expression(0)
		}

	}
	{
		p.SetState(300)
		p.Match(SolidityParserT__1)
	}

	return localctx
}

// IUsingForDeclarationContext is an interface to support dynamic dispatch.
type IUsingForDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUsingForDeclarationContext differentiates from other interfaces.
	IsUsingForDeclarationContext()
}

type UsingForDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUsingForDeclarationContext() *UsingForDeclarationContext {
	var p = new(UsingForDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_usingForDeclaration
	return p
}

func (*UsingForDeclarationContext) IsUsingForDeclarationContext() {}

func NewUsingForDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UsingForDeclarationContext {
	var p = new(UsingForDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_usingForDeclaration

	return p
}

func (s *UsingForDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *UsingForDeclarationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *UsingForDeclarationContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *UsingForDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UsingForDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UsingForDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterUsingForDeclaration(s)
	}
}

func (s *UsingForDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitUsingForDeclaration(s)
	}
}

func (p *SolidityParser) UsingForDeclaration() (localctx IUsingForDeclarationContext) {
	localctx = NewUsingForDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, SolidityParserRULE_usingForDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(302)
		p.Match(SolidityParserT__22)
	}
	{
		p.SetState(303)
		p.Identifier()
	}
	{
		p.SetState(304)
		p.Match(SolidityParserT__23)
	}
	p.SetState(307)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__11:
		{
			p.SetState(305)
			p.Match(SolidityParserT__11)
		}

	case SolidityParserT__12, SolidityParserT__27, SolidityParserT__33, SolidityParserT__35, SolidityParserT__39, SolidityParserT__48, SolidityParserT__49, SolidityParserT__50, SolidityParserT__51, SolidityParserInt, SolidityParserUint, SolidityParserByte, SolidityParserFixed, SolidityParserUfixed, SolidityParserIdentifier:
		{
			p.SetState(306)
			p.typeName(0)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(309)
		p.Match(SolidityParserT__1)
	}

	return localctx
}

// IStructDefinitionContext is an interface to support dynamic dispatch.
type IStructDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructDefinitionContext differentiates from other interfaces.
	IsStructDefinitionContext()
}

type StructDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructDefinitionContext() *StructDefinitionContext {
	var p = new(StructDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_structDefinition
	return p
}

func (*StructDefinitionContext) IsStructDefinitionContext() {}

func NewStructDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructDefinitionContext {
	var p = new(StructDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_structDefinition

	return p
}

func (s *StructDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *StructDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *StructDefinitionContext) AllVariableDeclaration() []IVariableDeclarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariableDeclarationContext)(nil)).Elem())
	var tst = make([]IVariableDeclarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariableDeclarationContext)
		}
	}

	return tst
}

func (s *StructDefinitionContext) VariableDeclaration(i int) IVariableDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationContext)
}

func (s *StructDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterStructDefinition(s)
	}
}

func (s *StructDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitStructDefinition(s)
	}
}

func (p *SolidityParser) StructDefinition() (localctx IStructDefinitionContext) {
	localctx = NewStructDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, SolidityParserRULE_structDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(311)
		p.Match(SolidityParserT__24)
	}
	{
		p.SetState(312)
		p.Identifier()
	}
	{
		p.SetState(313)
		p.Match(SolidityParserT__13)
	}
	p.SetState(324)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__12 || _la == SolidityParserT__27 || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(SolidityParserT__33-34))|(1<<(SolidityParserT__35-34))|(1<<(SolidityParserT__39-34))|(1<<(SolidityParserT__48-34))|(1<<(SolidityParserT__49-34))|(1<<(SolidityParserT__50-34))|(1<<(SolidityParserT__51-34)))) != 0) || (((_la-93)&-(0x1f+1)) == 0 && ((1<<uint((_la-93)))&((1<<(SolidityParserInt-93))|(1<<(SolidityParserUint-93))|(1<<(SolidityParserByte-93))|(1<<(SolidityParserFixed-93))|(1<<(SolidityParserUfixed-93))|(1<<(SolidityParserIdentifier-93)))) != 0) {
		{
			p.SetState(314)
			p.VariableDeclaration()
		}
		{
			p.SetState(315)
			p.Match(SolidityParserT__1)
		}
		p.SetState(321)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SolidityParserT__12 || _la == SolidityParserT__27 || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(SolidityParserT__33-34))|(1<<(SolidityParserT__35-34))|(1<<(SolidityParserT__39-34))|(1<<(SolidityParserT__48-34))|(1<<(SolidityParserT__49-34))|(1<<(SolidityParserT__50-34))|(1<<(SolidityParserT__51-34)))) != 0) || (((_la-93)&-(0x1f+1)) == 0 && ((1<<uint((_la-93)))&((1<<(SolidityParserInt-93))|(1<<(SolidityParserUint-93))|(1<<(SolidityParserByte-93))|(1<<(SolidityParserFixed-93))|(1<<(SolidityParserUfixed-93))|(1<<(SolidityParserIdentifier-93)))) != 0) {
			{
				p.SetState(316)
				p.VariableDeclaration()
			}
			{
				p.SetState(317)
				p.Match(SolidityParserT__1)
			}

			p.SetState(323)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(326)
		p.Match(SolidityParserT__15)
	}

	return localctx
}

// IConstructorDefinitionContext is an interface to support dynamic dispatch.
type IConstructorDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstructorDefinitionContext differentiates from other interfaces.
	IsConstructorDefinitionContext()
}

type ConstructorDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstructorDefinitionContext() *ConstructorDefinitionContext {
	var p = new(ConstructorDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_constructorDefinition
	return p
}

func (*ConstructorDefinitionContext) IsConstructorDefinitionContext() {}

func NewConstructorDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstructorDefinitionContext {
	var p = new(ConstructorDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_constructorDefinition

	return p
}

func (s *ConstructorDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstructorDefinitionContext) ParameterList() IParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterListContext)
}

func (s *ConstructorDefinitionContext) ModifierList() IModifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModifierListContext)
}

func (s *ConstructorDefinitionContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ConstructorDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstructorDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstructorDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterConstructorDefinition(s)
	}
}

func (s *ConstructorDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitConstructorDefinition(s)
	}
}

func (p *SolidityParser) ConstructorDefinition() (localctx IConstructorDefinitionContext) {
	localctx = NewConstructorDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, SolidityParserRULE_constructorDefinition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(328)
		p.Match(SolidityParserT__25)
	}
	{
		p.SetState(329)
		p.ParameterList()
	}
	{
		p.SetState(330)
		p.ModifierList()
	}
	{
		p.SetState(331)
		p.Block()
	}

	return localctx
}

// IModifierDefinitionContext is an interface to support dynamic dispatch.
type IModifierDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModifierDefinitionContext differentiates from other interfaces.
	IsModifierDefinitionContext()
}

type ModifierDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModifierDefinitionContext() *ModifierDefinitionContext {
	var p = new(ModifierDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_modifierDefinition
	return p
}

func (*ModifierDefinitionContext) IsModifierDefinitionContext() {}

func NewModifierDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ModifierDefinitionContext {
	var p = new(ModifierDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_modifierDefinition

	return p
}

func (s *ModifierDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ModifierDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ModifierDefinitionContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ModifierDefinitionContext) ParameterList() IParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterListContext)
}

func (s *ModifierDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModifierDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ModifierDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterModifierDefinition(s)
	}
}

func (s *ModifierDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitModifierDefinition(s)
	}
}

func (p *SolidityParser) ModifierDefinition() (localctx IModifierDefinitionContext) {
	localctx = NewModifierDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, SolidityParserRULE_modifierDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(333)
		p.Match(SolidityParserT__26)
	}
	{
		p.SetState(334)
		p.Identifier()
	}
	p.SetState(336)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__20 {
		{
			p.SetState(335)
			p.ParameterList()
		}

	}
	{
		p.SetState(338)
		p.Block()
	}

	return localctx
}

// IModifierInvocationContext is an interface to support dynamic dispatch.
type IModifierInvocationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModifierInvocationContext differentiates from other interfaces.
	IsModifierInvocationContext()
}

type ModifierInvocationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModifierInvocationContext() *ModifierInvocationContext {
	var p = new(ModifierInvocationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_modifierInvocation
	return p
}

func (*ModifierInvocationContext) IsModifierInvocationContext() {}

func NewModifierInvocationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ModifierInvocationContext {
	var p = new(ModifierInvocationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_modifierInvocation

	return p
}

func (s *ModifierInvocationContext) GetParser() antlr.Parser { return s.parser }

func (s *ModifierInvocationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ModifierInvocationContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *ModifierInvocationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModifierInvocationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ModifierInvocationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterModifierInvocation(s)
	}
}

func (s *ModifierInvocationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitModifierInvocation(s)
	}
}

func (p *SolidityParser) ModifierInvocation() (localctx IModifierInvocationContext) {
	localctx = NewModifierInvocationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, SolidityParserRULE_modifierInvocation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(340)
		p.Identifier()
	}
	p.SetState(346)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__20 {
		{
			p.SetState(341)
			p.Match(SolidityParserT__20)
		}
		p.SetState(343)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__3)|(1<<SolidityParserT__12)|(1<<SolidityParserT__20))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(SolidityParserT__31-32))|(1<<(SolidityParserT__33-32))|(1<<(SolidityParserT__39-32))|(1<<(SolidityParserT__48-32))|(1<<(SolidityParserT__49-32))|(1<<(SolidityParserT__50-32))|(1<<(SolidityParserT__51-32))|(1<<(SolidityParserT__52-32))|(1<<(SolidityParserT__53-32))|(1<<(SolidityParserT__54-32))|(1<<(SolidityParserT__55-32))|(1<<(SolidityParserT__56-32))|(1<<(SolidityParserT__57-32))|(1<<(SolidityParserT__58-32))|(1<<(SolidityParserT__59-32)))) != 0) || (((_la-93)&-(0x1f+1)) == 0 && ((1<<uint((_la-93)))&((1<<(SolidityParserInt-93))|(1<<(SolidityParserUint-93))|(1<<(SolidityParserByte-93))|(1<<(SolidityParserFixed-93))|(1<<(SolidityParserUfixed-93))|(1<<(SolidityParserBooleanLiteral-93))|(1<<(SolidityParserDecimalNumber-93))|(1<<(SolidityParserHexNumber-93))|(1<<(SolidityParserHexLiteral-93))|(1<<(SolidityParserTypeKeyword-93))|(1<<(SolidityParserIdentifier-93))|(1<<(SolidityParserStringLiteral-93)))) != 0) {
			{
				p.SetState(342)
				p.ExpressionList()
			}

		}
		{
			p.SetState(345)
			p.Match(SolidityParserT__21)
		}

	}

	return localctx
}

// IFunctionDefinitionContext is an interface to support dynamic dispatch.
type IFunctionDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionDefinitionContext differentiates from other interfaces.
	IsFunctionDefinitionContext()
}

type FunctionDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionDefinitionContext() *FunctionDefinitionContext {
	var p = new(FunctionDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_functionDefinition
	return p
}

func (*FunctionDefinitionContext) IsFunctionDefinitionContext() {}

func NewFunctionDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionDefinitionContext {
	var p = new(FunctionDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_functionDefinition

	return p
}

func (s *FunctionDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionDefinitionContext) ParameterList() IParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterListContext)
}

func (s *FunctionDefinitionContext) ModifierList() IModifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModifierListContext)
}

func (s *FunctionDefinitionContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *FunctionDefinitionContext) NatSpec() INatSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INatSpecContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INatSpecContext)
}

func (s *FunctionDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *FunctionDefinitionContext) ReturnParameters() IReturnParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnParametersContext)
}

func (s *FunctionDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterFunctionDefinition(s)
	}
}

func (s *FunctionDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitFunctionDefinition(s)
	}
}

func (p *SolidityParser) FunctionDefinition() (localctx IFunctionDefinitionContext) {
	localctx = NewFunctionDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, SolidityParserRULE_functionDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(349)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserNatSpecSingleLine || _la == SolidityParserNatSpecMultiLine {
		{
			p.SetState(348)
			p.NatSpec()
		}

	}
	{
		p.SetState(351)
		p.Match(SolidityParserT__27)
	}
	p.SetState(353)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__12 || _la == SolidityParserT__39 || _la == SolidityParserIdentifier {
		{
			p.SetState(352)
			p.Identifier()
		}

	}
	{
		p.SetState(355)
		p.ParameterList()
	}
	{
		p.SetState(356)
		p.ModifierList()
	}
	p.SetState(358)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__28 {
		{
			p.SetState(357)
			p.ReturnParameters()
		}

	}
	p.SetState(362)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__1:
		{
			p.SetState(360)
			p.Match(SolidityParserT__1)
		}

	case SolidityParserT__13:
		{
			p.SetState(361)
			p.Block()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IReturnParametersContext is an interface to support dynamic dispatch.
type IReturnParametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturnParametersContext differentiates from other interfaces.
	IsReturnParametersContext()
}

type ReturnParametersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnParametersContext() *ReturnParametersContext {
	var p = new(ReturnParametersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_returnParameters
	return p
}

func (*ReturnParametersContext) IsReturnParametersContext() {}

func NewReturnParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnParametersContext {
	var p = new(ReturnParametersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_returnParameters

	return p
}

func (s *ReturnParametersContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnParametersContext) ParameterList() IParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterListContext)
}

func (s *ReturnParametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnParametersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterReturnParameters(s)
	}
}

func (s *ReturnParametersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitReturnParameters(s)
	}
}

func (p *SolidityParser) ReturnParameters() (localctx IReturnParametersContext) {
	localctx = NewReturnParametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, SolidityParserRULE_returnParameters)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(364)
		p.Match(SolidityParserT__28)
	}
	{
		p.SetState(365)
		p.ParameterList()
	}

	return localctx
}

// IModifierListContext is an interface to support dynamic dispatch.
type IModifierListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModifierListContext differentiates from other interfaces.
	IsModifierListContext()
}

type ModifierListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModifierListContext() *ModifierListContext {
	var p = new(ModifierListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_modifierList
	return p
}

func (*ModifierListContext) IsModifierListContext() {}

func NewModifierListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ModifierListContext {
	var p = new(ModifierListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_modifierList

	return p
}

func (s *ModifierListContext) GetParser() antlr.Parser { return s.parser }

func (s *ModifierListContext) AllModifierInvocation() []IModifierInvocationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IModifierInvocationContext)(nil)).Elem())
	var tst = make([]IModifierInvocationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IModifierInvocationContext)
		}
	}

	return tst
}

func (s *ModifierListContext) ModifierInvocation(i int) IModifierInvocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModifierInvocationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IModifierInvocationContext)
}

func (s *ModifierListContext) AllStateMutability() []IStateMutabilityContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStateMutabilityContext)(nil)).Elem())
	var tst = make([]IStateMutabilityContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStateMutabilityContext)
		}
	}

	return tst
}

func (s *ModifierListContext) StateMutability(i int) IStateMutabilityContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStateMutabilityContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStateMutabilityContext)
}

func (s *ModifierListContext) AllExternalKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserExternalKeyword)
}

func (s *ModifierListContext) ExternalKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserExternalKeyword, i)
}

func (s *ModifierListContext) AllPublicKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserPublicKeyword)
}

func (s *ModifierListContext) PublicKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserPublicKeyword, i)
}

func (s *ModifierListContext) AllInternalKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserInternalKeyword)
}

func (s *ModifierListContext) InternalKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserInternalKeyword, i)
}

func (s *ModifierListContext) AllPrivateKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserPrivateKeyword)
}

func (s *ModifierListContext) PrivateKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserPrivateKeyword, i)
}

func (s *ModifierListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModifierListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ModifierListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterModifierList(s)
	}
}

func (s *ModifierListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitModifierList(s)
	}
}

func (p *SolidityParser) ModifierList() (localctx IModifierListContext) {
	localctx = NewModifierListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, SolidityParserRULE_modifierList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(375)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SolidityParserT__12 || _la == SolidityParserT__39 || (((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(SolidityParserConstantKeyword-107))|(1<<(SolidityParserExternalKeyword-107))|(1<<(SolidityParserInternalKeyword-107))|(1<<(SolidityParserPayableKeyword-107))|(1<<(SolidityParserPrivateKeyword-107))|(1<<(SolidityParserPublicKeyword-107))|(1<<(SolidityParserPureKeyword-107))|(1<<(SolidityParserViewKeyword-107))|(1<<(SolidityParserIdentifier-107)))) != 0) {
		p.SetState(373)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SolidityParserT__12, SolidityParserT__39, SolidityParserIdentifier:
			{
				p.SetState(367)
				p.ModifierInvocation()
			}

		case SolidityParserConstantKeyword, SolidityParserPayableKeyword, SolidityParserPureKeyword, SolidityParserViewKeyword:
			{
				p.SetState(368)
				p.StateMutability()
			}

		case SolidityParserExternalKeyword:
			{
				p.SetState(369)
				p.Match(SolidityParserExternalKeyword)
			}

		case SolidityParserPublicKeyword:
			{
				p.SetState(370)
				p.Match(SolidityParserPublicKeyword)
			}

		case SolidityParserInternalKeyword:
			{
				p.SetState(371)
				p.Match(SolidityParserInternalKeyword)
			}

		case SolidityParserPrivateKeyword:
			{
				p.SetState(372)
				p.Match(SolidityParserPrivateKeyword)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(377)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IEventDefinitionContext is an interface to support dynamic dispatch.
type IEventDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEventDefinitionContext differentiates from other interfaces.
	IsEventDefinitionContext()
}

type EventDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEventDefinitionContext() *EventDefinitionContext {
	var p = new(EventDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_eventDefinition
	return p
}

func (*EventDefinitionContext) IsEventDefinitionContext() {}

func NewEventDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EventDefinitionContext {
	var p = new(EventDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_eventDefinition

	return p
}

func (s *EventDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *EventDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *EventDefinitionContext) EventParameterList() IEventParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEventParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEventParameterListContext)
}

func (s *EventDefinitionContext) NatSpec() INatSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INatSpecContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INatSpecContext)
}

func (s *EventDefinitionContext) AnonymousKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserAnonymousKeyword, 0)
}

func (s *EventDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EventDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EventDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterEventDefinition(s)
	}
}

func (s *EventDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitEventDefinition(s)
	}
}

func (p *SolidityParser) EventDefinition() (localctx IEventDefinitionContext) {
	localctx = NewEventDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, SolidityParserRULE_eventDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(379)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserNatSpecSingleLine || _la == SolidityParserNatSpecMultiLine {
		{
			p.SetState(378)
			p.NatSpec()
		}

	}
	{
		p.SetState(381)
		p.Match(SolidityParserT__29)
	}
	{
		p.SetState(382)
		p.Identifier()
	}
	{
		p.SetState(383)
		p.EventParameterList()
	}
	p.SetState(385)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserAnonymousKeyword {
		{
			p.SetState(384)
			p.Match(SolidityParserAnonymousKeyword)
		}

	}
	{
		p.SetState(387)
		p.Match(SolidityParserT__1)
	}

	return localctx
}

// IEnumValueContext is an interface to support dynamic dispatch.
type IEnumValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumValueContext differentiates from other interfaces.
	IsEnumValueContext()
}

type EnumValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumValueContext() *EnumValueContext {
	var p = new(EnumValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_enumValue
	return p
}

func (*EnumValueContext) IsEnumValueContext() {}

func NewEnumValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumValueContext {
	var p = new(EnumValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_enumValue

	return p
}

func (s *EnumValueContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumValueContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *EnumValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterEnumValue(s)
	}
}

func (s *EnumValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitEnumValue(s)
	}
}

func (p *SolidityParser) EnumValue() (localctx IEnumValueContext) {
	localctx = NewEnumValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, SolidityParserRULE_enumValue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(389)
		p.Identifier()
	}

	return localctx
}

// IEnumDefinitionContext is an interface to support dynamic dispatch.
type IEnumDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumDefinitionContext differentiates from other interfaces.
	IsEnumDefinitionContext()
}

type EnumDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumDefinitionContext() *EnumDefinitionContext {
	var p = new(EnumDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_enumDefinition
	return p
}

func (*EnumDefinitionContext) IsEnumDefinitionContext() {}

func NewEnumDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumDefinitionContext {
	var p = new(EnumDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_enumDefinition

	return p
}

func (s *EnumDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *EnumDefinitionContext) AllEnumValue() []IEnumValueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEnumValueContext)(nil)).Elem())
	var tst = make([]IEnumValueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEnumValueContext)
		}
	}

	return tst
}

func (s *EnumDefinitionContext) EnumValue(i int) IEnumValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumValueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEnumValueContext)
}

func (s *EnumDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterEnumDefinition(s)
	}
}

func (s *EnumDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitEnumDefinition(s)
	}
}

func (p *SolidityParser) EnumDefinition() (localctx IEnumDefinitionContext) {
	localctx = NewEnumDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, SolidityParserRULE_enumDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(391)
		p.Match(SolidityParserT__30)
	}
	{
		p.SetState(392)
		p.Identifier()
	}
	{
		p.SetState(393)
		p.Match(SolidityParserT__13)
	}
	p.SetState(395)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__12 || _la == SolidityParserT__39 || _la == SolidityParserIdentifier {
		{
			p.SetState(394)
			p.EnumValue()
		}

	}
	p.SetState(401)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SolidityParserT__14 {
		{
			p.SetState(397)
			p.Match(SolidityParserT__14)
		}
		{
			p.SetState(398)
			p.EnumValue()
		}

		p.SetState(403)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(404)
		p.Match(SolidityParserT__15)
	}

	return localctx
}

// IParameterListContext is an interface to support dynamic dispatch.
type IParameterListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterListContext differentiates from other interfaces.
	IsParameterListContext()
}

type ParameterListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterListContext() *ParameterListContext {
	var p = new(ParameterListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_parameterList
	return p
}

func (*ParameterListContext) IsParameterListContext() {}

func NewParameterListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterListContext {
	var p = new(ParameterListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_parameterList

	return p
}

func (s *ParameterListContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterListContext) AllParameter() []IParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParameterContext)(nil)).Elem())
	var tst = make([]IParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParameterContext)
		}
	}

	return tst
}

func (s *ParameterListContext) Parameter(i int) IParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParameterContext)
}

func (s *ParameterListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterParameterList(s)
	}
}

func (s *ParameterListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitParameterList(s)
	}
}

func (p *SolidityParser) ParameterList() (localctx IParameterListContext) {
	localctx = NewParameterListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, SolidityParserRULE_parameterList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(406)
		p.Match(SolidityParserT__20)
	}
	p.SetState(415)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__12 || _la == SolidityParserT__27 || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(SolidityParserT__33-34))|(1<<(SolidityParserT__35-34))|(1<<(SolidityParserT__39-34))|(1<<(SolidityParserT__48-34))|(1<<(SolidityParserT__49-34))|(1<<(SolidityParserT__50-34))|(1<<(SolidityParserT__51-34)))) != 0) || (((_la-93)&-(0x1f+1)) == 0 && ((1<<uint((_la-93)))&((1<<(SolidityParserInt-93))|(1<<(SolidityParserUint-93))|(1<<(SolidityParserByte-93))|(1<<(SolidityParserFixed-93))|(1<<(SolidityParserUfixed-93))|(1<<(SolidityParserIdentifier-93)))) != 0) {
		{
			p.SetState(407)
			p.Parameter()
		}
		p.SetState(412)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SolidityParserT__14 {
			{
				p.SetState(408)
				p.Match(SolidityParserT__14)
			}
			{
				p.SetState(409)
				p.Parameter()
			}

			p.SetState(414)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(417)
		p.Match(SolidityParserT__21)
	}

	return localctx
}

// IParameterContext is an interface to support dynamic dispatch.
type IParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterContext differentiates from other interfaces.
	IsParameterContext()
}

type ParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterContext() *ParameterContext {
	var p = new(ParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_parameter
	return p
}

func (*ParameterContext) IsParameterContext() {}

func NewParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterContext {
	var p = new(ParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_parameter

	return p
}

func (s *ParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *ParameterContext) StorageLocation() IStorageLocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStorageLocationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStorageLocationContext)
}

func (s *ParameterContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterParameter(s)
	}
}

func (s *ParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitParameter(s)
	}
}

func (p *SolidityParser) Parameter() (localctx IParameterContext) {
	localctx = NewParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, SolidityParserRULE_parameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(419)
		p.typeName(0)
	}
	p.SetState(421)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(420)
			p.StorageLocation()
		}

	}
	p.SetState(424)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__12 || _la == SolidityParserT__39 || _la == SolidityParserIdentifier {
		{
			p.SetState(423)
			p.Identifier()
		}

	}

	return localctx
}

// IEventParameterListContext is an interface to support dynamic dispatch.
type IEventParameterListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEventParameterListContext differentiates from other interfaces.
	IsEventParameterListContext()
}

type EventParameterListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEventParameterListContext() *EventParameterListContext {
	var p = new(EventParameterListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_eventParameterList
	return p
}

func (*EventParameterListContext) IsEventParameterListContext() {}

func NewEventParameterListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EventParameterListContext {
	var p = new(EventParameterListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_eventParameterList

	return p
}

func (s *EventParameterListContext) GetParser() antlr.Parser { return s.parser }

func (s *EventParameterListContext) AllEventParameter() []IEventParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEventParameterContext)(nil)).Elem())
	var tst = make([]IEventParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEventParameterContext)
		}
	}

	return tst
}

func (s *EventParameterListContext) EventParameter(i int) IEventParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEventParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEventParameterContext)
}

func (s *EventParameterListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EventParameterListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EventParameterListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterEventParameterList(s)
	}
}

func (s *EventParameterListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitEventParameterList(s)
	}
}

func (p *SolidityParser) EventParameterList() (localctx IEventParameterListContext) {
	localctx = NewEventParameterListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, SolidityParserRULE_eventParameterList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(426)
		p.Match(SolidityParserT__20)
	}
	p.SetState(435)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__12 || _la == SolidityParserT__27 || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(SolidityParserT__33-34))|(1<<(SolidityParserT__35-34))|(1<<(SolidityParserT__39-34))|(1<<(SolidityParserT__48-34))|(1<<(SolidityParserT__49-34))|(1<<(SolidityParserT__50-34))|(1<<(SolidityParserT__51-34)))) != 0) || (((_la-93)&-(0x1f+1)) == 0 && ((1<<uint((_la-93)))&((1<<(SolidityParserInt-93))|(1<<(SolidityParserUint-93))|(1<<(SolidityParserByte-93))|(1<<(SolidityParserFixed-93))|(1<<(SolidityParserUfixed-93))|(1<<(SolidityParserIdentifier-93)))) != 0) {
		{
			p.SetState(427)
			p.EventParameter()
		}
		p.SetState(432)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SolidityParserT__14 {
			{
				p.SetState(428)
				p.Match(SolidityParserT__14)
			}
			{
				p.SetState(429)
				p.EventParameter()
			}

			p.SetState(434)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(437)
		p.Match(SolidityParserT__21)
	}

	return localctx
}

// IEventParameterContext is an interface to support dynamic dispatch.
type IEventParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEventParameterContext differentiates from other interfaces.
	IsEventParameterContext()
}

type EventParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEventParameterContext() *EventParameterContext {
	var p = new(EventParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_eventParameter
	return p
}

func (*EventParameterContext) IsEventParameterContext() {}

func NewEventParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EventParameterContext {
	var p = new(EventParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_eventParameter

	return p
}

func (s *EventParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *EventParameterContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *EventParameterContext) IndexedKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserIndexedKeyword, 0)
}

func (s *EventParameterContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *EventParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EventParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EventParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterEventParameter(s)
	}
}

func (s *EventParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitEventParameter(s)
	}
}

func (p *SolidityParser) EventParameter() (localctx IEventParameterContext) {
	localctx = NewEventParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, SolidityParserRULE_eventParameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(439)
		p.typeName(0)
	}
	p.SetState(441)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserIndexedKeyword {
		{
			p.SetState(440)
			p.Match(SolidityParserIndexedKeyword)
		}

	}
	p.SetState(444)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__12 || _la == SolidityParserT__39 || _la == SolidityParserIdentifier {
		{
			p.SetState(443)
			p.Identifier()
		}

	}

	return localctx
}

// IFunctionTypeParameterListContext is an interface to support dynamic dispatch.
type IFunctionTypeParameterListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionTypeParameterListContext differentiates from other interfaces.
	IsFunctionTypeParameterListContext()
}

type FunctionTypeParameterListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionTypeParameterListContext() *FunctionTypeParameterListContext {
	var p = new(FunctionTypeParameterListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_functionTypeParameterList
	return p
}

func (*FunctionTypeParameterListContext) IsFunctionTypeParameterListContext() {}

func NewFunctionTypeParameterListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionTypeParameterListContext {
	var p = new(FunctionTypeParameterListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_functionTypeParameterList

	return p
}

func (s *FunctionTypeParameterListContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionTypeParameterListContext) AllFunctionTypeParameter() []IFunctionTypeParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionTypeParameterContext)(nil)).Elem())
	var tst = make([]IFunctionTypeParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionTypeParameterContext)
		}
	}

	return tst
}

func (s *FunctionTypeParameterListContext) FunctionTypeParameter(i int) IFunctionTypeParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionTypeParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeParameterContext)
}

func (s *FunctionTypeParameterListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeParameterListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionTypeParameterListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterFunctionTypeParameterList(s)
	}
}

func (s *FunctionTypeParameterListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitFunctionTypeParameterList(s)
	}
}

func (p *SolidityParser) FunctionTypeParameterList() (localctx IFunctionTypeParameterListContext) {
	localctx = NewFunctionTypeParameterListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, SolidityParserRULE_functionTypeParameterList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(446)
		p.Match(SolidityParserT__20)
	}
	p.SetState(455)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__12 || _la == SolidityParserT__27 || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(SolidityParserT__33-34))|(1<<(SolidityParserT__35-34))|(1<<(SolidityParserT__39-34))|(1<<(SolidityParserT__48-34))|(1<<(SolidityParserT__49-34))|(1<<(SolidityParserT__50-34))|(1<<(SolidityParserT__51-34)))) != 0) || (((_la-93)&-(0x1f+1)) == 0 && ((1<<uint((_la-93)))&((1<<(SolidityParserInt-93))|(1<<(SolidityParserUint-93))|(1<<(SolidityParserByte-93))|(1<<(SolidityParserFixed-93))|(1<<(SolidityParserUfixed-93))|(1<<(SolidityParserIdentifier-93)))) != 0) {
		{
			p.SetState(447)
			p.FunctionTypeParameter()
		}
		p.SetState(452)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SolidityParserT__14 {
			{
				p.SetState(448)
				p.Match(SolidityParserT__14)
			}
			{
				p.SetState(449)
				p.FunctionTypeParameter()
			}

			p.SetState(454)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(457)
		p.Match(SolidityParserT__21)
	}

	return localctx
}

// IFunctionTypeParameterContext is an interface to support dynamic dispatch.
type IFunctionTypeParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionTypeParameterContext differentiates from other interfaces.
	IsFunctionTypeParameterContext()
}

type FunctionTypeParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionTypeParameterContext() *FunctionTypeParameterContext {
	var p = new(FunctionTypeParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_functionTypeParameter
	return p
}

func (*FunctionTypeParameterContext) IsFunctionTypeParameterContext() {}

func NewFunctionTypeParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionTypeParameterContext {
	var p = new(FunctionTypeParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_functionTypeParameter

	return p
}

func (s *FunctionTypeParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionTypeParameterContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *FunctionTypeParameterContext) StorageLocation() IStorageLocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStorageLocationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStorageLocationContext)
}

func (s *FunctionTypeParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionTypeParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterFunctionTypeParameter(s)
	}
}

func (s *FunctionTypeParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitFunctionTypeParameter(s)
	}
}

func (p *SolidityParser) FunctionTypeParameter() (localctx IFunctionTypeParameterContext) {
	localctx = NewFunctionTypeParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, SolidityParserRULE_functionTypeParameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(459)
		p.typeName(0)
	}
	p.SetState(461)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-38)&-(0x1f+1)) == 0 && ((1<<uint((_la-38)))&((1<<(SolidityParserT__37-38))|(1<<(SolidityParserT__38-38))|(1<<(SolidityParserT__39-38)))) != 0 {
		{
			p.SetState(460)
			p.StorageLocation()
		}

	}

	return localctx
}

// IVariableDeclarationContext is an interface to support dynamic dispatch.
type IVariableDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclarationContext differentiates from other interfaces.
	IsVariableDeclarationContext()
}

type VariableDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclarationContext() *VariableDeclarationContext {
	var p = new(VariableDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_variableDeclaration
	return p
}

func (*VariableDeclarationContext) IsVariableDeclarationContext() {}

func NewVariableDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclarationContext {
	var p = new(VariableDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_variableDeclaration

	return p
}

func (s *VariableDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclarationContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *VariableDeclarationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *VariableDeclarationContext) StorageLocation() IStorageLocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStorageLocationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStorageLocationContext)
}

func (s *VariableDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterVariableDeclaration(s)
	}
}

func (s *VariableDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitVariableDeclaration(s)
	}
}

func (p *SolidityParser) VariableDeclaration() (localctx IVariableDeclarationContext) {
	localctx = NewVariableDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, SolidityParserRULE_variableDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(463)
		p.typeName(0)
	}
	p.SetState(465)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 47, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(464)
			p.StorageLocation()
		}

	}
	{
		p.SetState(467)
		p.Identifier()
	}

	return localctx
}

// ITypeNameContext is an interface to support dynamic dispatch.
type ITypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeNameContext differentiates from other interfaces.
	IsTypeNameContext()
}

type TypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeNameContext() *TypeNameContext {
	var p = new(TypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_typeName
	return p
}

func (*TypeNameContext) IsTypeNameContext() {}

func NewTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeNameContext {
	var p = new(TypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_typeName

	return p
}

func (s *TypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeNameContext) ElementaryTypeName() IElementaryTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementaryTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementaryTypeNameContext)
}

func (s *TypeNameContext) UserDefinedTypeName() IUserDefinedTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserDefinedTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserDefinedTypeNameContext)
}

func (s *TypeNameContext) Mapping() IMappingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMappingContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMappingContext)
}

func (s *TypeNameContext) FunctionTypeName() IFunctionTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeNameContext)
}

func (s *TypeNameContext) PayableKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserPayableKeyword, 0)
}

func (s *TypeNameContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *TypeNameContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterTypeName(s)
	}
}

func (s *TypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitTypeName(s)
	}
}

func (p *SolidityParser) TypeName() (localctx ITypeNameContext) {
	return p.typeName(0)
}

func (p *SolidityParser) typeName(_p int) (localctx ITypeNameContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewTypeNameContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ITypeNameContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 64
	p.EnterRecursionRule(localctx, 64, SolidityParserRULE_typeName, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(476)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 48, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(470)
			p.ElementaryTypeName()
		}

	case 2:
		{
			p.SetState(471)
			p.UserDefinedTypeName()
		}

	case 3:
		{
			p.SetState(472)
			p.Mapping()
		}

	case 4:
		{
			p.SetState(473)
			p.FunctionTypeName()
		}

	case 5:
		{
			p.SetState(474)
			p.Match(SolidityParserT__33)
		}
		{
			p.SetState(475)
			p.Match(SolidityParserPayableKeyword)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(486)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 50, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewTypeNameContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_typeName)
			p.SetState(478)

			if !(p.Precpred(p.GetParserRuleContext(), 3)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
			}
			{
				p.SetState(479)
				p.Match(SolidityParserT__31)
			}
			p.SetState(481)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__3)|(1<<SolidityParserT__12)|(1<<SolidityParserT__20))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(SolidityParserT__31-32))|(1<<(SolidityParserT__33-32))|(1<<(SolidityParserT__39-32))|(1<<(SolidityParserT__48-32))|(1<<(SolidityParserT__49-32))|(1<<(SolidityParserT__50-32))|(1<<(SolidityParserT__51-32))|(1<<(SolidityParserT__52-32))|(1<<(SolidityParserT__53-32))|(1<<(SolidityParserT__54-32))|(1<<(SolidityParserT__55-32))|(1<<(SolidityParserT__56-32))|(1<<(SolidityParserT__57-32))|(1<<(SolidityParserT__58-32))|(1<<(SolidityParserT__59-32)))) != 0) || (((_la-93)&-(0x1f+1)) == 0 && ((1<<uint((_la-93)))&((1<<(SolidityParserInt-93))|(1<<(SolidityParserUint-93))|(1<<(SolidityParserByte-93))|(1<<(SolidityParserFixed-93))|(1<<(SolidityParserUfixed-93))|(1<<(SolidityParserBooleanLiteral-93))|(1<<(SolidityParserDecimalNumber-93))|(1<<(SolidityParserHexNumber-93))|(1<<(SolidityParserHexLiteral-93))|(1<<(SolidityParserTypeKeyword-93))|(1<<(SolidityParserIdentifier-93))|(1<<(SolidityParserStringLiteral-93)))) != 0) {
				{
					p.SetState(480)
					p.expression(0)
				}

			}
			{
				p.SetState(483)
				p.Match(SolidityParserT__32)
			}

		}
		p.SetState(488)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 50, p.GetParserRuleContext())
	}

	return localctx
}

// IUserDefinedTypeNameContext is an interface to support dynamic dispatch.
type IUserDefinedTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUserDefinedTypeNameContext differentiates from other interfaces.
	IsUserDefinedTypeNameContext()
}

type UserDefinedTypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUserDefinedTypeNameContext() *UserDefinedTypeNameContext {
	var p = new(UserDefinedTypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_userDefinedTypeName
	return p
}

func (*UserDefinedTypeNameContext) IsUserDefinedTypeNameContext() {}

func NewUserDefinedTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserDefinedTypeNameContext {
	var p = new(UserDefinedTypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_userDefinedTypeName

	return p
}

func (s *UserDefinedTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *UserDefinedTypeNameContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *UserDefinedTypeNameContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *UserDefinedTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserDefinedTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserDefinedTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterUserDefinedTypeName(s)
	}
}

func (s *UserDefinedTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitUserDefinedTypeName(s)
	}
}

func (p *SolidityParser) UserDefinedTypeName() (localctx IUserDefinedTypeNameContext) {
	localctx = NewUserDefinedTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, SolidityParserRULE_userDefinedTypeName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(489)
		p.Identifier()
	}
	p.SetState(494)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 51, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(490)
				p.Match(SolidityParserT__34)
			}
			{
				p.SetState(491)
				p.Identifier()
			}

		}
		p.SetState(496)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 51, p.GetParserRuleContext())
	}

	return localctx
}

// IMappingContext is an interface to support dynamic dispatch.
type IMappingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMappingContext differentiates from other interfaces.
	IsMappingContext()
}

type MappingContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMappingContext() *MappingContext {
	var p = new(MappingContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_mapping
	return p
}

func (*MappingContext) IsMappingContext() {}

func NewMappingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MappingContext {
	var p = new(MappingContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_mapping

	return p
}

func (s *MappingContext) GetParser() antlr.Parser { return s.parser }

func (s *MappingContext) ElementaryTypeName() IElementaryTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementaryTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementaryTypeNameContext)
}

func (s *MappingContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *MappingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MappingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MappingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterMapping(s)
	}
}

func (s *MappingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitMapping(s)
	}
}

func (p *SolidityParser) Mapping() (localctx IMappingContext) {
	localctx = NewMappingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, SolidityParserRULE_mapping)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(497)
		p.Match(SolidityParserT__35)
	}
	{
		p.SetState(498)
		p.Match(SolidityParserT__20)
	}
	{
		p.SetState(499)
		p.ElementaryTypeName()
	}
	{
		p.SetState(500)
		p.Match(SolidityParserT__36)
	}
	{
		p.SetState(501)
		p.typeName(0)
	}
	{
		p.SetState(502)
		p.Match(SolidityParserT__21)
	}

	return localctx
}

// IFunctionTypeNameContext is an interface to support dynamic dispatch.
type IFunctionTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionTypeNameContext differentiates from other interfaces.
	IsFunctionTypeNameContext()
}

type FunctionTypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionTypeNameContext() *FunctionTypeNameContext {
	var p = new(FunctionTypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_functionTypeName
	return p
}

func (*FunctionTypeNameContext) IsFunctionTypeNameContext() {}

func NewFunctionTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionTypeNameContext {
	var p = new(FunctionTypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_functionTypeName

	return p
}

func (s *FunctionTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionTypeNameContext) AllFunctionTypeParameterList() []IFunctionTypeParameterListContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionTypeParameterListContext)(nil)).Elem())
	var tst = make([]IFunctionTypeParameterListContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionTypeParameterListContext)
		}
	}

	return tst
}

func (s *FunctionTypeNameContext) FunctionTypeParameterList(i int) IFunctionTypeParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionTypeParameterListContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeParameterListContext)
}

func (s *FunctionTypeNameContext) AllInternalKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserInternalKeyword)
}

func (s *FunctionTypeNameContext) InternalKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserInternalKeyword, i)
}

func (s *FunctionTypeNameContext) AllExternalKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserExternalKeyword)
}

func (s *FunctionTypeNameContext) ExternalKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserExternalKeyword, i)
}

func (s *FunctionTypeNameContext) AllStateMutability() []IStateMutabilityContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStateMutabilityContext)(nil)).Elem())
	var tst = make([]IStateMutabilityContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStateMutabilityContext)
		}
	}

	return tst
}

func (s *FunctionTypeNameContext) StateMutability(i int) IStateMutabilityContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStateMutabilityContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStateMutabilityContext)
}

func (s *FunctionTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterFunctionTypeName(s)
	}
}

func (s *FunctionTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitFunctionTypeName(s)
	}
}

func (p *SolidityParser) FunctionTypeName() (localctx IFunctionTypeNameContext) {
	localctx = NewFunctionTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, SolidityParserRULE_functionTypeName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(504)
		p.Match(SolidityParserT__27)
	}
	{
		p.SetState(505)
		p.FunctionTypeParameterList()
	}
	p.SetState(511)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 53, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(509)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SolidityParserInternalKeyword:
				{
					p.SetState(506)
					p.Match(SolidityParserInternalKeyword)
				}

			case SolidityParserExternalKeyword:
				{
					p.SetState(507)
					p.Match(SolidityParserExternalKeyword)
				}

			case SolidityParserConstantKeyword, SolidityParserPayableKeyword, SolidityParserPureKeyword, SolidityParserViewKeyword:
				{
					p.SetState(508)
					p.StateMutability()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(513)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 53, p.GetParserRuleContext())
	}
	p.SetState(516)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(514)
			p.Match(SolidityParserT__28)
		}
		{
			p.SetState(515)
			p.FunctionTypeParameterList()
		}

	}

	return localctx
}

// IStorageLocationContext is an interface to support dynamic dispatch.
type IStorageLocationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStorageLocationContext differentiates from other interfaces.
	IsStorageLocationContext()
}

type StorageLocationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStorageLocationContext() *StorageLocationContext {
	var p = new(StorageLocationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_storageLocation
	return p
}

func (*StorageLocationContext) IsStorageLocationContext() {}

func NewStorageLocationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StorageLocationContext {
	var p = new(StorageLocationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_storageLocation

	return p
}

func (s *StorageLocationContext) GetParser() antlr.Parser { return s.parser }
func (s *StorageLocationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StorageLocationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StorageLocationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterStorageLocation(s)
	}
}

func (s *StorageLocationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitStorageLocation(s)
	}
}

func (p *SolidityParser) StorageLocation() (localctx IStorageLocationContext) {
	localctx = NewStorageLocationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, SolidityParserRULE_storageLocation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(518)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-38)&-(0x1f+1)) == 0 && ((1<<uint((_la-38)))&((1<<(SolidityParserT__37-38))|(1<<(SolidityParserT__38-38))|(1<<(SolidityParserT__39-38)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IStateMutabilityContext is an interface to support dynamic dispatch.
type IStateMutabilityContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStateMutabilityContext differentiates from other interfaces.
	IsStateMutabilityContext()
}

type StateMutabilityContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStateMutabilityContext() *StateMutabilityContext {
	var p = new(StateMutabilityContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_stateMutability
	return p
}

func (*StateMutabilityContext) IsStateMutabilityContext() {}

func NewStateMutabilityContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StateMutabilityContext {
	var p = new(StateMutabilityContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_stateMutability

	return p
}

func (s *StateMutabilityContext) GetParser() antlr.Parser { return s.parser }

func (s *StateMutabilityContext) PureKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserPureKeyword, 0)
}

func (s *StateMutabilityContext) ConstantKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserConstantKeyword, 0)
}

func (s *StateMutabilityContext) ViewKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserViewKeyword, 0)
}

func (s *StateMutabilityContext) PayableKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserPayableKeyword, 0)
}

func (s *StateMutabilityContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StateMutabilityContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StateMutabilityContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterStateMutability(s)
	}
}

func (s *StateMutabilityContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitStateMutability(s)
	}
}

func (p *SolidityParser) StateMutability() (localctx IStateMutabilityContext) {
	localctx = NewStateMutabilityContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, SolidityParserRULE_stateMutability)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(520)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-107)&-(0x1f+1)) == 0 && ((1<<uint((_la-107)))&((1<<(SolidityParserConstantKeyword-107))|(1<<(SolidityParserPayableKeyword-107))|(1<<(SolidityParserPureKeyword-107))|(1<<(SolidityParserViewKeyword-107)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IBlockContext is an interface to support dynamic dispatch.
type IBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlockContext differentiates from other interfaces.
	IsBlockContext()
}

type BlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockContext() *BlockContext {
	var p = new(BlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_block
	return p
}

func (*BlockContext) IsBlockContext() {}

func NewBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockContext {
	var p = new(BlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_block

	return p
}

func (s *BlockContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *BlockContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *BlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterBlock(s)
	}
}

func (s *BlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitBlock(s)
	}
}

func (p *SolidityParser) Block() (localctx IBlockContext) {
	localctx = NewBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, SolidityParserRULE_block)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(522)
		p.Match(SolidityParserT__13)
	}
	p.SetState(526)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__3)|(1<<SolidityParserT__12)|(1<<SolidityParserT__13)|(1<<SolidityParserT__20)|(1<<SolidityParserT__23)|(1<<SolidityParserT__27))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(SolidityParserT__31-32))|(1<<(SolidityParserT__33-32))|(1<<(SolidityParserT__35-32))|(1<<(SolidityParserT__39-32))|(1<<(SolidityParserT__40-32))|(1<<(SolidityParserT__42-32))|(1<<(SolidityParserT__43-32))|(1<<(SolidityParserT__44-32))|(1<<(SolidityParserT__45-32))|(1<<(SolidityParserT__46-32))|(1<<(SolidityParserT__47-32))|(1<<(SolidityParserT__48-32))|(1<<(SolidityParserT__49-32))|(1<<(SolidityParserT__50-32))|(1<<(SolidityParserT__51-32))|(1<<(SolidityParserT__52-32))|(1<<(SolidityParserT__53-32))|(1<<(SolidityParserT__54-32))|(1<<(SolidityParserT__55-32))|(1<<(SolidityParserT__56-32))|(1<<(SolidityParserT__57-32))|(1<<(SolidityParserT__58-32))|(1<<(SolidityParserT__59-32)))) != 0) || (((_la-93)&-(0x1f+1)) == 0 && ((1<<uint((_la-93)))&((1<<(SolidityParserInt-93))|(1<<(SolidityParserUint-93))|(1<<(SolidityParserByte-93))|(1<<(SolidityParserFixed-93))|(1<<(SolidityParserUfixed-93))|(1<<(SolidityParserBooleanLiteral-93))|(1<<(SolidityParserDecimalNumber-93))|(1<<(SolidityParserHexNumber-93))|(1<<(SolidityParserHexLiteral-93))|(1<<(SolidityParserBreakKeyword-93))|(1<<(SolidityParserContinueKeyword-93))|(1<<(SolidityParserTypeKeyword-93))|(1<<(SolidityParserIdentifier-93))|(1<<(SolidityParserStringLiteral-93)))) != 0) {
		{
			p.SetState(523)
			p.Statement()
		}

		p.SetState(528)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(529)
		p.Match(SolidityParserT__15)
	}

	return localctx
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) IfStatement() IIfStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfStatementContext)
}

func (s *StatementContext) WhileStatement() IWhileStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhileStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhileStatementContext)
}

func (s *StatementContext) ForStatement() IForStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForStatementContext)
}

func (s *StatementContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *StatementContext) InlineAssemblyStatement() IInlineAssemblyStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInlineAssemblyStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInlineAssemblyStatementContext)
}

func (s *StatementContext) DoWhileStatement() IDoWhileStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDoWhileStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDoWhileStatementContext)
}

func (s *StatementContext) ContinueStatement() IContinueStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContinueStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContinueStatementContext)
}

func (s *StatementContext) BreakStatement() IBreakStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBreakStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBreakStatementContext)
}

func (s *StatementContext) ReturnStatement() IReturnStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnStatementContext)
}

func (s *StatementContext) ThrowStatement() IThrowStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThrowStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThrowStatementContext)
}

func (s *StatementContext) EmitStatement() IEmitStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEmitStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEmitStatementContext)
}

func (s *StatementContext) SimpleStatement() ISimpleStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleStatementContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterStatement(s)
	}
}

func (s *StatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitStatement(s)
	}
}

func (p *SolidityParser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, SolidityParserRULE_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(543)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__40:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(531)
			p.IfStatement()
		}

	case SolidityParserT__42:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(532)
			p.WhileStatement()
		}

	case SolidityParserT__23:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(533)
			p.ForStatement()
		}

	case SolidityParserT__13:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(534)
			p.Block()
		}

	case SolidityParserT__43:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(535)
			p.InlineAssemblyStatement()
		}

	case SolidityParserT__44:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(536)
			p.DoWhileStatement()
		}

	case SolidityParserContinueKeyword:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(537)
			p.ContinueStatement()
		}

	case SolidityParserBreakKeyword:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(538)
			p.BreakStatement()
		}

	case SolidityParserT__45:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(539)
			p.ReturnStatement()
		}

	case SolidityParserT__46:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(540)
			p.ThrowStatement()
		}

	case SolidityParserT__47:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(541)
			p.EmitStatement()
		}

	case SolidityParserT__3, SolidityParserT__12, SolidityParserT__20, SolidityParserT__27, SolidityParserT__31, SolidityParserT__33, SolidityParserT__35, SolidityParserT__39, SolidityParserT__48, SolidityParserT__49, SolidityParserT__50, SolidityParserT__51, SolidityParserT__52, SolidityParserT__53, SolidityParserT__54, SolidityParserT__55, SolidityParserT__56, SolidityParserT__57, SolidityParserT__58, SolidityParserT__59, SolidityParserInt, SolidityParserUint, SolidityParserByte, SolidityParserFixed, SolidityParserUfixed, SolidityParserBooleanLiteral, SolidityParserDecimalNumber, SolidityParserHexNumber, SolidityParserHexLiteral, SolidityParserTypeKeyword, SolidityParserIdentifier, SolidityParserStringLiteral:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(542)
			p.SimpleStatement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExpressionStatementContext is an interface to support dynamic dispatch.
type IExpressionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionStatementContext differentiates from other interfaces.
	IsExpressionStatementContext()
}

type ExpressionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionStatementContext() *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_expressionStatement
	return p
}

func (*ExpressionStatementContext) IsExpressionStatementContext() {}

func NewExpressionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_expressionStatement

	return p
}

func (s *ExpressionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterExpressionStatement(s)
	}
}

func (s *ExpressionStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitExpressionStatement(s)
	}
}

func (p *SolidityParser) ExpressionStatement() (localctx IExpressionStatementContext) {
	localctx = NewExpressionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, SolidityParserRULE_expressionStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(545)
		p.expression(0)
	}
	{
		p.SetState(546)
		p.Match(SolidityParserT__1)
	}

	return localctx
}

// IIfStatementContext is an interface to support dynamic dispatch.
type IIfStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIfStatementContext differentiates from other interfaces.
	IsIfStatementContext()
}

type IfStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfStatementContext() *IfStatementContext {
	var p = new(IfStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_ifStatement
	return p
}

func (*IfStatementContext) IsIfStatementContext() {}

func NewIfStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfStatementContext {
	var p = new(IfStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_ifStatement

	return p
}

func (s *IfStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IfStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IfStatementContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *IfStatementContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *IfStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterIfStatement(s)
	}
}

func (s *IfStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitIfStatement(s)
	}
}

func (p *SolidityParser) IfStatement() (localctx IIfStatementContext) {
	localctx = NewIfStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, SolidityParserRULE_ifStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(548)
		p.Match(SolidityParserT__40)
	}
	{
		p.SetState(549)
		p.Match(SolidityParserT__20)
	}
	{
		p.SetState(550)
		p.expression(0)
	}
	{
		p.SetState(551)
		p.Match(SolidityParserT__21)
	}
	{
		p.SetState(552)
		p.Statement()
	}
	p.SetState(555)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 57, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(553)
			p.Match(SolidityParserT__41)
		}
		{
			p.SetState(554)
			p.Statement()
		}

	}

	return localctx
}

// IWhileStatementContext is an interface to support dynamic dispatch.
type IWhileStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhileStatementContext differentiates from other interfaces.
	IsWhileStatementContext()
}

type WhileStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhileStatementContext() *WhileStatementContext {
	var p = new(WhileStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_whileStatement
	return p
}

func (*WhileStatementContext) IsWhileStatementContext() {}

func NewWhileStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhileStatementContext {
	var p = new(WhileStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_whileStatement

	return p
}

func (s *WhileStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *WhileStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *WhileStatementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *WhileStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhileStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhileStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterWhileStatement(s)
	}
}

func (s *WhileStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitWhileStatement(s)
	}
}

func (p *SolidityParser) WhileStatement() (localctx IWhileStatementContext) {
	localctx = NewWhileStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, SolidityParserRULE_whileStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(557)
		p.Match(SolidityParserT__42)
	}
	{
		p.SetState(558)
		p.Match(SolidityParserT__20)
	}
	{
		p.SetState(559)
		p.expression(0)
	}
	{
		p.SetState(560)
		p.Match(SolidityParserT__21)
	}
	{
		p.SetState(561)
		p.Statement()
	}

	return localctx
}

// ISimpleStatementContext is an interface to support dynamic dispatch.
type ISimpleStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimpleStatementContext differentiates from other interfaces.
	IsSimpleStatementContext()
}

type SimpleStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpleStatementContext() *SimpleStatementContext {
	var p = new(SimpleStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_simpleStatement
	return p
}

func (*SimpleStatementContext) IsSimpleStatementContext() {}

func NewSimpleStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpleStatementContext {
	var p = new(SimpleStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_simpleStatement

	return p
}

func (s *SimpleStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpleStatementContext) VariableDeclarationStatement() IVariableDeclarationStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationStatementContext)
}

func (s *SimpleStatementContext) ExpressionStatement() IExpressionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionStatementContext)
}

func (s *SimpleStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SimpleStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterSimpleStatement(s)
	}
}

func (s *SimpleStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitSimpleStatement(s)
	}
}

func (p *SolidityParser) SimpleStatement() (localctx ISimpleStatementContext) {
	localctx = NewSimpleStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, SolidityParserRULE_simpleStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(565)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 58, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(563)
			p.VariableDeclarationStatement()
		}

	case 2:
		{
			p.SetState(564)
			p.ExpressionStatement()
		}

	}

	return localctx
}

// IForStatementContext is an interface to support dynamic dispatch.
type IForStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForStatementContext differentiates from other interfaces.
	IsForStatementContext()
}

type ForStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForStatementContext() *ForStatementContext {
	var p = new(ForStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_forStatement
	return p
}

func (*ForStatementContext) IsForStatementContext() {}

func NewForStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForStatementContext {
	var p = new(ForStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_forStatement

	return p
}

func (s *ForStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ForStatementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *ForStatementContext) SimpleStatement() ISimpleStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleStatementContext)
}

func (s *ForStatementContext) ExpressionStatement() IExpressionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionStatementContext)
}

func (s *ForStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ForStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterForStatement(s)
	}
}

func (s *ForStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitForStatement(s)
	}
}

func (p *SolidityParser) ForStatement() (localctx IForStatementContext) {
	localctx = NewForStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, SolidityParserRULE_forStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(567)
		p.Match(SolidityParserT__23)
	}
	{
		p.SetState(568)
		p.Match(SolidityParserT__20)
	}
	p.SetState(571)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__3, SolidityParserT__12, SolidityParserT__20, SolidityParserT__27, SolidityParserT__31, SolidityParserT__33, SolidityParserT__35, SolidityParserT__39, SolidityParserT__48, SolidityParserT__49, SolidityParserT__50, SolidityParserT__51, SolidityParserT__52, SolidityParserT__53, SolidityParserT__54, SolidityParserT__55, SolidityParserT__56, SolidityParserT__57, SolidityParserT__58, SolidityParserT__59, SolidityParserInt, SolidityParserUint, SolidityParserByte, SolidityParserFixed, SolidityParserUfixed, SolidityParserBooleanLiteral, SolidityParserDecimalNumber, SolidityParserHexNumber, SolidityParserHexLiteral, SolidityParserTypeKeyword, SolidityParserIdentifier, SolidityParserStringLiteral:
		{
			p.SetState(569)
			p.SimpleStatement()
		}

	case SolidityParserT__1:
		{
			p.SetState(570)
			p.Match(SolidityParserT__1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(575)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__3, SolidityParserT__12, SolidityParserT__20, SolidityParserT__31, SolidityParserT__33, SolidityParserT__39, SolidityParserT__48, SolidityParserT__49, SolidityParserT__50, SolidityParserT__51, SolidityParserT__52, SolidityParserT__53, SolidityParserT__54, SolidityParserT__55, SolidityParserT__56, SolidityParserT__57, SolidityParserT__58, SolidityParserT__59, SolidityParserInt, SolidityParserUint, SolidityParserByte, SolidityParserFixed, SolidityParserUfixed, SolidityParserBooleanLiteral, SolidityParserDecimalNumber, SolidityParserHexNumber, SolidityParserHexLiteral, SolidityParserTypeKeyword, SolidityParserIdentifier, SolidityParserStringLiteral:
		{
			p.SetState(573)
			p.ExpressionStatement()
		}

	case SolidityParserT__1:
		{
			p.SetState(574)
			p.Match(SolidityParserT__1)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(578)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__3)|(1<<SolidityParserT__12)|(1<<SolidityParserT__20))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(SolidityParserT__31-32))|(1<<(SolidityParserT__33-32))|(1<<(SolidityParserT__39-32))|(1<<(SolidityParserT__48-32))|(1<<(SolidityParserT__49-32))|(1<<(SolidityParserT__50-32))|(1<<(SolidityParserT__51-32))|(1<<(SolidityParserT__52-32))|(1<<(SolidityParserT__53-32))|(1<<(SolidityParserT__54-32))|(1<<(SolidityParserT__55-32))|(1<<(SolidityParserT__56-32))|(1<<(SolidityParserT__57-32))|(1<<(SolidityParserT__58-32))|(1<<(SolidityParserT__59-32)))) != 0) || (((_la-93)&-(0x1f+1)) == 0 && ((1<<uint((_la-93)))&((1<<(SolidityParserInt-93))|(1<<(SolidityParserUint-93))|(1<<(SolidityParserByte-93))|(1<<(SolidityParserFixed-93))|(1<<(SolidityParserUfixed-93))|(1<<(SolidityParserBooleanLiteral-93))|(1<<(SolidityParserDecimalNumber-93))|(1<<(SolidityParserHexNumber-93))|(1<<(SolidityParserHexLiteral-93))|(1<<(SolidityParserTypeKeyword-93))|(1<<(SolidityParserIdentifier-93))|(1<<(SolidityParserStringLiteral-93)))) != 0) {
		{
			p.SetState(577)
			p.expression(0)
		}

	}
	{
		p.SetState(580)
		p.Match(SolidityParserT__21)
	}
	{
		p.SetState(581)
		p.Statement()
	}

	return localctx
}

// IInlineAssemblyStatementContext is an interface to support dynamic dispatch.
type IInlineAssemblyStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInlineAssemblyStatementContext differentiates from other interfaces.
	IsInlineAssemblyStatementContext()
}

type InlineAssemblyStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInlineAssemblyStatementContext() *InlineAssemblyStatementContext {
	var p = new(InlineAssemblyStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_inlineAssemblyStatement
	return p
}

func (*InlineAssemblyStatementContext) IsInlineAssemblyStatementContext() {}

func NewInlineAssemblyStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InlineAssemblyStatementContext {
	var p = new(InlineAssemblyStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_inlineAssemblyStatement

	return p
}

func (s *InlineAssemblyStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *InlineAssemblyStatementContext) AssemblyBlock() IAssemblyBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyBlockContext)
}

func (s *InlineAssemblyStatementContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(SolidityParserStringLiteral, 0)
}

func (s *InlineAssemblyStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InlineAssemblyStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InlineAssemblyStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterInlineAssemblyStatement(s)
	}
}

func (s *InlineAssemblyStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitInlineAssemblyStatement(s)
	}
}

func (p *SolidityParser) InlineAssemblyStatement() (localctx IInlineAssemblyStatementContext) {
	localctx = NewInlineAssemblyStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, SolidityParserRULE_inlineAssemblyStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(583)
		p.Match(SolidityParserT__43)
	}
	p.SetState(585)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserStringLiteral {
		{
			p.SetState(584)
			p.Match(SolidityParserStringLiteral)
		}

	}
	{
		p.SetState(587)
		p.AssemblyBlock()
	}

	return localctx
}

// IDoWhileStatementContext is an interface to support dynamic dispatch.
type IDoWhileStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDoWhileStatementContext differentiates from other interfaces.
	IsDoWhileStatementContext()
}

type DoWhileStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDoWhileStatementContext() *DoWhileStatementContext {
	var p = new(DoWhileStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_doWhileStatement
	return p
}

func (*DoWhileStatementContext) IsDoWhileStatementContext() {}

func NewDoWhileStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DoWhileStatementContext {
	var p = new(DoWhileStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_doWhileStatement

	return p
}

func (s *DoWhileStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DoWhileStatementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *DoWhileStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DoWhileStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DoWhileStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DoWhileStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterDoWhileStatement(s)
	}
}

func (s *DoWhileStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitDoWhileStatement(s)
	}
}

func (p *SolidityParser) DoWhileStatement() (localctx IDoWhileStatementContext) {
	localctx = NewDoWhileStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, SolidityParserRULE_doWhileStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(589)
		p.Match(SolidityParserT__44)
	}
	{
		p.SetState(590)
		p.Statement()
	}
	{
		p.SetState(591)
		p.Match(SolidityParserT__42)
	}
	{
		p.SetState(592)
		p.Match(SolidityParserT__20)
	}
	{
		p.SetState(593)
		p.expression(0)
	}
	{
		p.SetState(594)
		p.Match(SolidityParserT__21)
	}
	{
		p.SetState(595)
		p.Match(SolidityParserT__1)
	}

	return localctx
}

// IContinueStatementContext is an interface to support dynamic dispatch.
type IContinueStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContinueStatementContext differentiates from other interfaces.
	IsContinueStatementContext()
}

type ContinueStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContinueStatementContext() *ContinueStatementContext {
	var p = new(ContinueStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_continueStatement
	return p
}

func (*ContinueStatementContext) IsContinueStatementContext() {}

func NewContinueStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ContinueStatementContext {
	var p = new(ContinueStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_continueStatement

	return p
}

func (s *ContinueStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ContinueStatementContext) ContinueKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserContinueKeyword, 0)
}

func (s *ContinueStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContinueStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ContinueStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterContinueStatement(s)
	}
}

func (s *ContinueStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitContinueStatement(s)
	}
}

func (p *SolidityParser) ContinueStatement() (localctx IContinueStatementContext) {
	localctx = NewContinueStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, SolidityParserRULE_continueStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(597)
		p.Match(SolidityParserContinueKeyword)
	}
	{
		p.SetState(598)
		p.Match(SolidityParserT__1)
	}

	return localctx
}

// IBreakStatementContext is an interface to support dynamic dispatch.
type IBreakStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBreakStatementContext differentiates from other interfaces.
	IsBreakStatementContext()
}

type BreakStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBreakStatementContext() *BreakStatementContext {
	var p = new(BreakStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_breakStatement
	return p
}

func (*BreakStatementContext) IsBreakStatementContext() {}

func NewBreakStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BreakStatementContext {
	var p = new(BreakStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_breakStatement

	return p
}

func (s *BreakStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BreakStatementContext) BreakKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserBreakKeyword, 0)
}

func (s *BreakStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BreakStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterBreakStatement(s)
	}
}

func (s *BreakStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitBreakStatement(s)
	}
}

func (p *SolidityParser) BreakStatement() (localctx IBreakStatementContext) {
	localctx = NewBreakStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, SolidityParserRULE_breakStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(600)
		p.Match(SolidityParserBreakKeyword)
	}
	{
		p.SetState(601)
		p.Match(SolidityParserT__1)
	}

	return localctx
}

// IReturnStatementContext is an interface to support dynamic dispatch.
type IReturnStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturnStatementContext differentiates from other interfaces.
	IsReturnStatementContext()
}

type ReturnStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnStatementContext() *ReturnStatementContext {
	var p = new(ReturnStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_returnStatement
	return p
}

func (*ReturnStatementContext) IsReturnStatementContext() {}

func NewReturnStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnStatementContext {
	var p = new(ReturnStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_returnStatement

	return p
}

func (s *ReturnStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ReturnStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterReturnStatement(s)
	}
}

func (s *ReturnStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitReturnStatement(s)
	}
}

func (p *SolidityParser) ReturnStatement() (localctx IReturnStatementContext) {
	localctx = NewReturnStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, SolidityParserRULE_returnStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(603)
		p.Match(SolidityParserT__45)
	}
	p.SetState(605)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__3)|(1<<SolidityParserT__12)|(1<<SolidityParserT__20))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(SolidityParserT__31-32))|(1<<(SolidityParserT__33-32))|(1<<(SolidityParserT__39-32))|(1<<(SolidityParserT__48-32))|(1<<(SolidityParserT__49-32))|(1<<(SolidityParserT__50-32))|(1<<(SolidityParserT__51-32))|(1<<(SolidityParserT__52-32))|(1<<(SolidityParserT__53-32))|(1<<(SolidityParserT__54-32))|(1<<(SolidityParserT__55-32))|(1<<(SolidityParserT__56-32))|(1<<(SolidityParserT__57-32))|(1<<(SolidityParserT__58-32))|(1<<(SolidityParserT__59-32)))) != 0) || (((_la-93)&-(0x1f+1)) == 0 && ((1<<uint((_la-93)))&((1<<(SolidityParserInt-93))|(1<<(SolidityParserUint-93))|(1<<(SolidityParserByte-93))|(1<<(SolidityParserFixed-93))|(1<<(SolidityParserUfixed-93))|(1<<(SolidityParserBooleanLiteral-93))|(1<<(SolidityParserDecimalNumber-93))|(1<<(SolidityParserHexNumber-93))|(1<<(SolidityParserHexLiteral-93))|(1<<(SolidityParserTypeKeyword-93))|(1<<(SolidityParserIdentifier-93))|(1<<(SolidityParserStringLiteral-93)))) != 0) {
		{
			p.SetState(604)
			p.expression(0)
		}

	}
	{
		p.SetState(607)
		p.Match(SolidityParserT__1)
	}

	return localctx
}

// IThrowStatementContext is an interface to support dynamic dispatch.
type IThrowStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsThrowStatementContext differentiates from other interfaces.
	IsThrowStatementContext()
}

type ThrowStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyThrowStatementContext() *ThrowStatementContext {
	var p = new(ThrowStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_throwStatement
	return p
}

func (*ThrowStatementContext) IsThrowStatementContext() {}

func NewThrowStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ThrowStatementContext {
	var p = new(ThrowStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_throwStatement

	return p
}

func (s *ThrowStatementContext) GetParser() antlr.Parser { return s.parser }
func (s *ThrowStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ThrowStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ThrowStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterThrowStatement(s)
	}
}

func (s *ThrowStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitThrowStatement(s)
	}
}

func (p *SolidityParser) ThrowStatement() (localctx IThrowStatementContext) {
	localctx = NewThrowStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, SolidityParserRULE_throwStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(609)
		p.Match(SolidityParserT__46)
	}
	{
		p.SetState(610)
		p.Match(SolidityParserT__1)
	}

	return localctx
}

// IEmitStatementContext is an interface to support dynamic dispatch.
type IEmitStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEmitStatementContext differentiates from other interfaces.
	IsEmitStatementContext()
}

type EmitStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEmitStatementContext() *EmitStatementContext {
	var p = new(EmitStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_emitStatement
	return p
}

func (*EmitStatementContext) IsEmitStatementContext() {}

func NewEmitStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EmitStatementContext {
	var p = new(EmitStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_emitStatement

	return p
}

func (s *EmitStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *EmitStatementContext) FunctionCall() IFunctionCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionCallContext)
}

func (s *EmitStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EmitStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EmitStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterEmitStatement(s)
	}
}

func (s *EmitStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitEmitStatement(s)
	}
}

func (p *SolidityParser) EmitStatement() (localctx IEmitStatementContext) {
	localctx = NewEmitStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, SolidityParserRULE_emitStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(612)
		p.Match(SolidityParserT__47)
	}
	{
		p.SetState(613)
		p.FunctionCall()
	}
	{
		p.SetState(614)
		p.Match(SolidityParserT__1)
	}

	return localctx
}

// IVariableDeclarationStatementContext is an interface to support dynamic dispatch.
type IVariableDeclarationStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclarationStatementContext differentiates from other interfaces.
	IsVariableDeclarationStatementContext()
}

type VariableDeclarationStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclarationStatementContext() *VariableDeclarationStatementContext {
	var p = new(VariableDeclarationStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_variableDeclarationStatement
	return p
}

func (*VariableDeclarationStatementContext) IsVariableDeclarationStatementContext() {}

func NewVariableDeclarationStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclarationStatementContext {
	var p = new(VariableDeclarationStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_variableDeclarationStatement

	return p
}

func (s *VariableDeclarationStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclarationStatementContext) IdentifierList() IIdentifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierListContext)
}

func (s *VariableDeclarationStatementContext) VariableDeclaration() IVariableDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationContext)
}

func (s *VariableDeclarationStatementContext) VariableDeclarationList() IVariableDeclarationListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationListContext)
}

func (s *VariableDeclarationStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *VariableDeclarationStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclarationStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclarationStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterVariableDeclarationStatement(s)
	}
}

func (s *VariableDeclarationStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitVariableDeclarationStatement(s)
	}
}

func (p *SolidityParser) VariableDeclarationStatement() (localctx IVariableDeclarationStatementContext) {
	localctx = NewVariableDeclarationStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, SolidityParserRULE_variableDeclarationStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(623)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 64, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(616)
			p.Match(SolidityParserT__48)
		}
		{
			p.SetState(617)
			p.IdentifierList()
		}

	case 2:
		{
			p.SetState(618)
			p.VariableDeclaration()
		}

	case 3:
		{
			p.SetState(619)
			p.Match(SolidityParserT__20)
		}
		{
			p.SetState(620)
			p.VariableDeclarationList()
		}
		{
			p.SetState(621)
			p.Match(SolidityParserT__21)
		}

	}
	p.SetState(627)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__8 {
		{
			p.SetState(625)
			p.Match(SolidityParserT__8)
		}
		{
			p.SetState(626)
			p.expression(0)
		}

	}
	{
		p.SetState(629)
		p.Match(SolidityParserT__1)
	}

	return localctx
}

// IVariableDeclarationListContext is an interface to support dynamic dispatch.
type IVariableDeclarationListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclarationListContext differentiates from other interfaces.
	IsVariableDeclarationListContext()
}

type VariableDeclarationListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclarationListContext() *VariableDeclarationListContext {
	var p = new(VariableDeclarationListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_variableDeclarationList
	return p
}

func (*VariableDeclarationListContext) IsVariableDeclarationListContext() {}

func NewVariableDeclarationListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclarationListContext {
	var p = new(VariableDeclarationListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_variableDeclarationList

	return p
}

func (s *VariableDeclarationListContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclarationListContext) AllVariableDeclaration() []IVariableDeclarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariableDeclarationContext)(nil)).Elem())
	var tst = make([]IVariableDeclarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariableDeclarationContext)
		}
	}

	return tst
}

func (s *VariableDeclarationListContext) VariableDeclaration(i int) IVariableDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationContext)
}

func (s *VariableDeclarationListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclarationListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclarationListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterVariableDeclarationList(s)
	}
}

func (s *VariableDeclarationListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitVariableDeclarationList(s)
	}
}

func (p *SolidityParser) VariableDeclarationList() (localctx IVariableDeclarationListContext) {
	localctx = NewVariableDeclarationListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, SolidityParserRULE_variableDeclarationList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(632)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__12 || _la == SolidityParserT__27 || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(SolidityParserT__33-34))|(1<<(SolidityParserT__35-34))|(1<<(SolidityParserT__39-34))|(1<<(SolidityParserT__48-34))|(1<<(SolidityParserT__49-34))|(1<<(SolidityParserT__50-34))|(1<<(SolidityParserT__51-34)))) != 0) || (((_la-93)&-(0x1f+1)) == 0 && ((1<<uint((_la-93)))&((1<<(SolidityParserInt-93))|(1<<(SolidityParserUint-93))|(1<<(SolidityParserByte-93))|(1<<(SolidityParserFixed-93))|(1<<(SolidityParserUfixed-93))|(1<<(SolidityParserIdentifier-93)))) != 0) {
		{
			p.SetState(631)
			p.VariableDeclaration()
		}

	}
	p.SetState(640)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SolidityParserT__14 {
		{
			p.SetState(634)
			p.Match(SolidityParserT__14)
		}
		p.SetState(636)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SolidityParserT__12 || _la == SolidityParserT__27 || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(SolidityParserT__33-34))|(1<<(SolidityParserT__35-34))|(1<<(SolidityParserT__39-34))|(1<<(SolidityParserT__48-34))|(1<<(SolidityParserT__49-34))|(1<<(SolidityParserT__50-34))|(1<<(SolidityParserT__51-34)))) != 0) || (((_la-93)&-(0x1f+1)) == 0 && ((1<<uint((_la-93)))&((1<<(SolidityParserInt-93))|(1<<(SolidityParserUint-93))|(1<<(SolidityParserByte-93))|(1<<(SolidityParserFixed-93))|(1<<(SolidityParserUfixed-93))|(1<<(SolidityParserIdentifier-93)))) != 0) {
			{
				p.SetState(635)
				p.VariableDeclaration()
			}

		}

		p.SetState(642)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IIdentifierListContext is an interface to support dynamic dispatch.
type IIdentifierListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierListContext differentiates from other interfaces.
	IsIdentifierListContext()
}

type IdentifierListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierListContext() *IdentifierListContext {
	var p = new(IdentifierListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_identifierList
	return p
}

func (*IdentifierListContext) IsIdentifierListContext() {}

func NewIdentifierListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierListContext {
	var p = new(IdentifierListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_identifierList

	return p
}

func (s *IdentifierListContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierListContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *IdentifierListContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *IdentifierListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterIdentifierList(s)
	}
}

func (s *IdentifierListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitIdentifierList(s)
	}
}

func (p *SolidityParser) IdentifierList() (localctx IIdentifierListContext) {
	localctx = NewIdentifierListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, SolidityParserRULE_identifierList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(643)
		p.Match(SolidityParserT__20)
	}
	p.SetState(650)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 70, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(645)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SolidityParserT__12 || _la == SolidityParserT__39 || _la == SolidityParserIdentifier {
				{
					p.SetState(644)
					p.Identifier()
				}

			}
			{
				p.SetState(647)
				p.Match(SolidityParserT__14)
			}

		}
		p.SetState(652)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 70, p.GetParserRuleContext())
	}
	p.SetState(654)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__12 || _la == SolidityParserT__39 || _la == SolidityParserIdentifier {
		{
			p.SetState(653)
			p.Identifier()
		}

	}
	{
		p.SetState(656)
		p.Match(SolidityParserT__21)
	}

	return localctx
}

// IElementaryTypeNameContext is an interface to support dynamic dispatch.
type IElementaryTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElementaryTypeNameContext differentiates from other interfaces.
	IsElementaryTypeNameContext()
}

type ElementaryTypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElementaryTypeNameContext() *ElementaryTypeNameContext {
	var p = new(ElementaryTypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_elementaryTypeName
	return p
}

func (*ElementaryTypeNameContext) IsElementaryTypeNameContext() {}

func NewElementaryTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElementaryTypeNameContext {
	var p = new(ElementaryTypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_elementaryTypeName

	return p
}

func (s *ElementaryTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *ElementaryTypeNameContext) Int() antlr.TerminalNode {
	return s.GetToken(SolidityParserInt, 0)
}

func (s *ElementaryTypeNameContext) Uint() antlr.TerminalNode {
	return s.GetToken(SolidityParserUint, 0)
}

func (s *ElementaryTypeNameContext) Byte() antlr.TerminalNode {
	return s.GetToken(SolidityParserByte, 0)
}

func (s *ElementaryTypeNameContext) Fixed() antlr.TerminalNode {
	return s.GetToken(SolidityParserFixed, 0)
}

func (s *ElementaryTypeNameContext) Ufixed() antlr.TerminalNode {
	return s.GetToken(SolidityParserUfixed, 0)
}

func (s *ElementaryTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElementaryTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElementaryTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterElementaryTypeName(s)
	}
}

func (s *ElementaryTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitElementaryTypeName(s)
	}
}

func (p *SolidityParser) ElementaryTypeName() (localctx IElementaryTypeNameContext) {
	localctx = NewElementaryTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, SolidityParserRULE_elementaryTypeName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(658)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(SolidityParserT__33-34))|(1<<(SolidityParserT__48-34))|(1<<(SolidityParserT__49-34))|(1<<(SolidityParserT__50-34))|(1<<(SolidityParserT__51-34)))) != 0) || (((_la-93)&-(0x1f+1)) == 0 && ((1<<uint((_la-93)))&((1<<(SolidityParserInt-93))|(1<<(SolidityParserUint-93))|(1<<(SolidityParserByte-93))|(1<<(SolidityParserFixed-93))|(1<<(SolidityParserUfixed-93)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *ExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionContext) PrimaryExpression() IPrimaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryExpressionContext)
}

func (s *ExpressionContext) FunctionCallArguments() IFunctionCallArgumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionCallArgumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionCallArgumentsContext)
}

func (s *ExpressionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterExpression(s)
	}
}

func (s *ExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitExpression(s)
	}
}

func (p *SolidityParser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *SolidityParser) expression(_p int) (localctx IExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 112
	p.EnterRecursionRule(localctx, 112, SolidityParserRULE_expression, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(678)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 72, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(661)
			p.Match(SolidityParserT__54)
		}
		{
			p.SetState(662)
			p.typeName(0)
		}

	case 2:
		{
			p.SetState(663)
			p.Match(SolidityParserT__20)
		}
		{
			p.SetState(664)
			p.expression(0)
		}
		{
			p.SetState(665)
			p.Match(SolidityParserT__21)
		}

	case 3:
		{
			p.SetState(667)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SolidityParserT__52 || _la == SolidityParserT__53) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(668)
			p.expression(19)
		}

	case 4:
		{
			p.SetState(669)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SolidityParserT__55 || _la == SolidityParserT__56) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(670)
			p.expression(18)
		}

	case 5:
		{
			p.SetState(671)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SolidityParserT__57 || _la == SolidityParserT__58) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(672)
			p.expression(17)
		}

	case 6:
		{
			p.SetState(673)
			p.Match(SolidityParserT__59)
		}
		{
			p.SetState(674)
			p.expression(16)
		}

	case 7:
		{
			p.SetState(675)
			p.Match(SolidityParserT__3)
		}
		{
			p.SetState(676)
			p.expression(15)
		}

	case 8:
		{
			p.SetState(677)
			p.PrimaryExpression()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(739)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 74, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(737)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 73, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(680)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
				}
				{
					p.SetState(681)
					p.Match(SolidityParserT__60)
				}
				{
					p.SetState(682)
					p.expression(15)
				}

			case 2:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(683)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
				}
				{
					p.SetState(684)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SolidityParserT__11 || _la == SolidityParserT__61 || _la == SolidityParserT__62) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(685)
					p.expression(14)
				}

			case 3:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(686)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
				}
				{
					p.SetState(687)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SolidityParserT__55 || _la == SolidityParserT__56) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(688)
					p.expression(13)
				}

			case 4:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(689)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
				}
				{
					p.SetState(690)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SolidityParserT__63 || _la == SolidityParserT__64) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(691)
					p.expression(12)
				}

			case 5:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(692)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
				}
				{
					p.SetState(693)
					p.Match(SolidityParserT__65)
				}
				{
					p.SetState(694)
					p.expression(11)
				}

			case 6:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(695)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(696)
					p.Match(SolidityParserT__2)
				}
				{
					p.SetState(697)
					p.expression(10)
				}

			case 7:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(698)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(699)
					p.Match(SolidityParserT__66)
				}
				{
					p.SetState(700)
					p.expression(9)
				}

			case 8:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(701)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(702)
					_la = p.GetTokenStream().LA(1)

					if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__4)|(1<<SolidityParserT__5)|(1<<SolidityParserT__6)|(1<<SolidityParserT__7))) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(703)
					p.expression(8)
				}

			case 9:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(704)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(705)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SolidityParserT__67 || _la == SolidityParserT__68) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(706)
					p.expression(7)
				}

			case 10:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(707)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(708)
					p.Match(SolidityParserT__69)
				}
				{
					p.SetState(709)
					p.expression(6)
				}

			case 11:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(710)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(711)
					p.Match(SolidityParserT__70)
				}
				{
					p.SetState(712)
					p.expression(5)
				}

			case 12:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(713)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(714)
					p.Match(SolidityParserT__71)
				}
				{
					p.SetState(715)
					p.expression(0)
				}
				{
					p.SetState(716)
					p.Match(SolidityParserT__72)
				}
				{
					p.SetState(717)
					p.expression(4)
				}

			case 13:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(719)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(720)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SolidityParserT__8 || (((_la-74)&-(0x1f+1)) == 0 && ((1<<uint((_la-74)))&((1<<(SolidityParserT__73-74))|(1<<(SolidityParserT__74-74))|(1<<(SolidityParserT__75-74))|(1<<(SolidityParserT__76-74))|(1<<(SolidityParserT__77-74))|(1<<(SolidityParserT__78-74))|(1<<(SolidityParserT__79-74))|(1<<(SolidityParserT__80-74))|(1<<(SolidityParserT__81-74))|(1<<(SolidityParserT__82-74)))) != 0)) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(721)
					p.expression(3)
				}

			case 14:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(722)

				if !(p.Precpred(p.GetParserRuleContext(), 25)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 25)", ""))
				}
				{
					p.SetState(723)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SolidityParserT__52 || _la == SolidityParserT__53) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			case 15:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(724)

				if !(p.Precpred(p.GetParserRuleContext(), 23)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 23)", ""))
				}
				{
					p.SetState(725)
					p.Match(SolidityParserT__31)
				}
				{
					p.SetState(726)
					p.expression(0)
				}
				{
					p.SetState(727)
					p.Match(SolidityParserT__32)
				}

			case 16:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(729)

				if !(p.Precpred(p.GetParserRuleContext(), 22)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 22)", ""))
				}
				{
					p.SetState(730)
					p.Match(SolidityParserT__20)
				}
				{
					p.SetState(731)
					p.FunctionCallArguments()
				}
				{
					p.SetState(732)
					p.Match(SolidityParserT__21)
				}

			case 17:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(734)

				if !(p.Precpred(p.GetParserRuleContext(), 21)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 21)", ""))
				}
				{
					p.SetState(735)
					p.Match(SolidityParserT__34)
				}
				{
					p.SetState(736)
					p.Identifier()
				}

			}

		}
		p.SetState(741)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 74, p.GetParserRuleContext())
	}

	return localctx
}

// IPrimaryExpressionContext is an interface to support dynamic dispatch.
type IPrimaryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimaryExpressionContext differentiates from other interfaces.
	IsPrimaryExpressionContext()
}

type PrimaryExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryExpressionContext() *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_primaryExpression
	return p
}

func (*PrimaryExpressionContext) IsPrimaryExpressionContext() {}

func NewPrimaryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_primaryExpression

	return p
}

func (s *PrimaryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryExpressionContext) BooleanLiteral() antlr.TerminalNode {
	return s.GetToken(SolidityParserBooleanLiteral, 0)
}

func (s *PrimaryExpressionContext) NumberLiteral() INumberLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumberLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumberLiteralContext)
}

func (s *PrimaryExpressionContext) HexLiteral() antlr.TerminalNode {
	return s.GetToken(SolidityParserHexLiteral, 0)
}

func (s *PrimaryExpressionContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(SolidityParserStringLiteral, 0)
}

func (s *PrimaryExpressionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *PrimaryExpressionContext) TypeKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserTypeKeyword, 0)
}

func (s *PrimaryExpressionContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *PrimaryExpressionContext) TypeNameExpression() ITypeNameExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameExpressionContext)
}

func (s *PrimaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterPrimaryExpression(s)
	}
}

func (s *PrimaryExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitPrimaryExpression(s)
	}
}

func (p *SolidityParser) PrimaryExpression() (localctx IPrimaryExpressionContext) {
	localctx = NewPrimaryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, SolidityParserRULE_primaryExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(758)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 77, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(742)
			p.Match(SolidityParserBooleanLiteral)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(743)
			p.NumberLiteral()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(744)
			p.Match(SolidityParserHexLiteral)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(745)
			p.Match(SolidityParserStringLiteral)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(746)
			p.Identifier()
		}
		p.SetState(749)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 75, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(747)
				p.Match(SolidityParserT__31)
			}
			{
				p.SetState(748)
				p.Match(SolidityParserT__32)
			}

		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(751)
			p.Match(SolidityParserTypeKeyword)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(752)
			p.TupleExpression()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(753)
			p.TypeNameExpression()
		}
		p.SetState(756)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 76, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(754)
				p.Match(SolidityParserT__31)
			}
			{
				p.SetState(755)
				p.Match(SolidityParserT__32)
			}

		}

	}

	return localctx
}

// IExpressionListContext is an interface to support dynamic dispatch.
type IExpressionListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionListContext differentiates from other interfaces.
	IsExpressionListContext()
}

type ExpressionListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionListContext() *ExpressionListContext {
	var p = new(ExpressionListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_expressionList
	return p
}

func (*ExpressionListContext) IsExpressionListContext() {}

func NewExpressionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionListContext {
	var p = new(ExpressionListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_expressionList

	return p
}

func (s *ExpressionListContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionListContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionListContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterExpressionList(s)
	}
}

func (s *ExpressionListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitExpressionList(s)
	}
}

func (p *SolidityParser) ExpressionList() (localctx IExpressionListContext) {
	localctx = NewExpressionListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, SolidityParserRULE_expressionList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(760)
		p.expression(0)
	}
	p.SetState(765)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SolidityParserT__14 {
		{
			p.SetState(761)
			p.Match(SolidityParserT__14)
		}
		{
			p.SetState(762)
			p.expression(0)
		}

		p.SetState(767)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// INameValueListContext is an interface to support dynamic dispatch.
type INameValueListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNameValueListContext differentiates from other interfaces.
	IsNameValueListContext()
}

type NameValueListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameValueListContext() *NameValueListContext {
	var p = new(NameValueListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_nameValueList
	return p
}

func (*NameValueListContext) IsNameValueListContext() {}

func NewNameValueListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameValueListContext {
	var p = new(NameValueListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_nameValueList

	return p
}

func (s *NameValueListContext) GetParser() antlr.Parser { return s.parser }

func (s *NameValueListContext) AllNameValue() []INameValueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INameValueContext)(nil)).Elem())
	var tst = make([]INameValueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INameValueContext)
		}
	}

	return tst
}

func (s *NameValueListContext) NameValue(i int) INameValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameValueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INameValueContext)
}

func (s *NameValueListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameValueListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameValueListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterNameValueList(s)
	}
}

func (s *NameValueListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitNameValueList(s)
	}
}

func (p *SolidityParser) NameValueList() (localctx INameValueListContext) {
	localctx = NewNameValueListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, SolidityParserRULE_nameValueList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(768)
		p.NameValue()
	}
	p.SetState(773)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 79, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(769)
				p.Match(SolidityParserT__14)
			}
			{
				p.SetState(770)
				p.NameValue()
			}

		}
		p.SetState(775)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 79, p.GetParserRuleContext())
	}
	p.SetState(777)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__14 {
		{
			p.SetState(776)
			p.Match(SolidityParserT__14)
		}

	}

	return localctx
}

// INameValueContext is an interface to support dynamic dispatch.
type INameValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNameValueContext differentiates from other interfaces.
	IsNameValueContext()
}

type NameValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameValueContext() *NameValueContext {
	var p = new(NameValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_nameValue
	return p
}

func (*NameValueContext) IsNameValueContext() {}

func NewNameValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameValueContext {
	var p = new(NameValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_nameValue

	return p
}

func (s *NameValueContext) GetParser() antlr.Parser { return s.parser }

func (s *NameValueContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *NameValueContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NameValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterNameValue(s)
	}
}

func (s *NameValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitNameValue(s)
	}
}

func (p *SolidityParser) NameValue() (localctx INameValueContext) {
	localctx = NewNameValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, SolidityParserRULE_nameValue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(779)
		p.Identifier()
	}
	{
		p.SetState(780)
		p.Match(SolidityParserT__72)
	}
	{
		p.SetState(781)
		p.expression(0)
	}

	return localctx
}

// IFunctionCallArgumentsContext is an interface to support dynamic dispatch.
type IFunctionCallArgumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionCallArgumentsContext differentiates from other interfaces.
	IsFunctionCallArgumentsContext()
}

type FunctionCallArgumentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionCallArgumentsContext() *FunctionCallArgumentsContext {
	var p = new(FunctionCallArgumentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_functionCallArguments
	return p
}

func (*FunctionCallArgumentsContext) IsFunctionCallArgumentsContext() {}

func NewFunctionCallArgumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionCallArgumentsContext {
	var p = new(FunctionCallArgumentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_functionCallArguments

	return p
}

func (s *FunctionCallArgumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionCallArgumentsContext) NameValueList() INameValueListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameValueListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameValueListContext)
}

func (s *FunctionCallArgumentsContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *FunctionCallArgumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallArgumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionCallArgumentsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterFunctionCallArguments(s)
	}
}

func (s *FunctionCallArgumentsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitFunctionCallArguments(s)
	}
}

func (p *SolidityParser) FunctionCallArguments() (localctx IFunctionCallArgumentsContext) {
	localctx = NewFunctionCallArgumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, SolidityParserRULE_functionCallArguments)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(791)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__13:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(783)
			p.Match(SolidityParserT__13)
		}
		p.SetState(785)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SolidityParserT__12 || _la == SolidityParserT__39 || _la == SolidityParserIdentifier {
			{
				p.SetState(784)
				p.NameValueList()
			}

		}
		{
			p.SetState(787)
			p.Match(SolidityParserT__15)
		}

	case SolidityParserT__3, SolidityParserT__12, SolidityParserT__20, SolidityParserT__21, SolidityParserT__31, SolidityParserT__33, SolidityParserT__39, SolidityParserT__48, SolidityParserT__49, SolidityParserT__50, SolidityParserT__51, SolidityParserT__52, SolidityParserT__53, SolidityParserT__54, SolidityParserT__55, SolidityParserT__56, SolidityParserT__57, SolidityParserT__58, SolidityParserT__59, SolidityParserInt, SolidityParserUint, SolidityParserByte, SolidityParserFixed, SolidityParserUfixed, SolidityParserBooleanLiteral, SolidityParserDecimalNumber, SolidityParserHexNumber, SolidityParserHexLiteral, SolidityParserTypeKeyword, SolidityParserIdentifier, SolidityParserStringLiteral:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(789)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__3)|(1<<SolidityParserT__12)|(1<<SolidityParserT__20))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(SolidityParserT__31-32))|(1<<(SolidityParserT__33-32))|(1<<(SolidityParserT__39-32))|(1<<(SolidityParserT__48-32))|(1<<(SolidityParserT__49-32))|(1<<(SolidityParserT__50-32))|(1<<(SolidityParserT__51-32))|(1<<(SolidityParserT__52-32))|(1<<(SolidityParserT__53-32))|(1<<(SolidityParserT__54-32))|(1<<(SolidityParserT__55-32))|(1<<(SolidityParserT__56-32))|(1<<(SolidityParserT__57-32))|(1<<(SolidityParserT__58-32))|(1<<(SolidityParserT__59-32)))) != 0) || (((_la-93)&-(0x1f+1)) == 0 && ((1<<uint((_la-93)))&((1<<(SolidityParserInt-93))|(1<<(SolidityParserUint-93))|(1<<(SolidityParserByte-93))|(1<<(SolidityParserFixed-93))|(1<<(SolidityParserUfixed-93))|(1<<(SolidityParserBooleanLiteral-93))|(1<<(SolidityParserDecimalNumber-93))|(1<<(SolidityParserHexNumber-93))|(1<<(SolidityParserHexLiteral-93))|(1<<(SolidityParserTypeKeyword-93))|(1<<(SolidityParserIdentifier-93))|(1<<(SolidityParserStringLiteral-93)))) != 0) {
			{
				p.SetState(788)
				p.ExpressionList()
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFunctionCallContext is an interface to support dynamic dispatch.
type IFunctionCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionCallContext differentiates from other interfaces.
	IsFunctionCallContext()
}

type FunctionCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionCallContext() *FunctionCallContext {
	var p = new(FunctionCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_functionCall
	return p
}

func (*FunctionCallContext) IsFunctionCallContext() {}

func NewFunctionCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionCallContext {
	var p = new(FunctionCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_functionCall

	return p
}

func (s *FunctionCallContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionCallContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FunctionCallContext) FunctionCallArguments() IFunctionCallArgumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionCallArgumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionCallArgumentsContext)
}

func (s *FunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterFunctionCall(s)
	}
}

func (s *FunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitFunctionCall(s)
	}
}

func (p *SolidityParser) FunctionCall() (localctx IFunctionCallContext) {
	localctx = NewFunctionCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, SolidityParserRULE_functionCall)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(793)
		p.expression(0)
	}
	{
		p.SetState(794)
		p.Match(SolidityParserT__20)
	}
	{
		p.SetState(795)
		p.FunctionCallArguments()
	}
	{
		p.SetState(796)
		p.Match(SolidityParserT__21)
	}

	return localctx
}

// IAssemblyBlockContext is an interface to support dynamic dispatch.
type IAssemblyBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyBlockContext differentiates from other interfaces.
	IsAssemblyBlockContext()
}

type AssemblyBlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyBlockContext() *AssemblyBlockContext {
	var p = new(AssemblyBlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyBlock
	return p
}

func (*AssemblyBlockContext) IsAssemblyBlockContext() {}

func NewAssemblyBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyBlockContext {
	var p = new(AssemblyBlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyBlock

	return p
}

func (s *AssemblyBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyBlockContext) AllAssemblyItem() []IAssemblyItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssemblyItemContext)(nil)).Elem())
	var tst = make([]IAssemblyItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssemblyItemContext)
		}
	}

	return tst
}

func (s *AssemblyBlockContext) AssemblyItem(i int) IAssemblyItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssemblyItemContext)
}

func (s *AssemblyBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyBlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblyBlock(s)
	}
}

func (s *AssemblyBlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblyBlock(s)
	}
}

func (p *SolidityParser) AssemblyBlock() (localctx IAssemblyBlockContext) {
	localctx = NewAssemblyBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, SolidityParserRULE_assemblyBlock)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(798)
		p.Match(SolidityParserT__13)
	}
	p.SetState(802)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__12)|(1<<SolidityParserT__13)|(1<<SolidityParserT__20)|(1<<SolidityParserT__23)|(1<<SolidityParserT__27))) != 0) || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(SolidityParserT__33-34))|(1<<(SolidityParserT__39-34))|(1<<(SolidityParserT__40-34))|(1<<(SolidityParserT__43-34))|(1<<(SolidityParserT__45-34))|(1<<(SolidityParserT__51-34)))) != 0) || (((_la-84)&-(0x1f+1)) == 0 && ((1<<uint((_la-84)))&((1<<(SolidityParserT__83-84))|(1<<(SolidityParserT__85-84))|(1<<(SolidityParserT__86-84))|(1<<(SolidityParserDecimalNumber-84))|(1<<(SolidityParserHexNumber-84))|(1<<(SolidityParserHexLiteral-84))|(1<<(SolidityParserBreakKeyword-84))|(1<<(SolidityParserContinueKeyword-84)))) != 0) || _la == SolidityParserIdentifier || _la == SolidityParserStringLiteral {
		{
			p.SetState(799)
			p.AssemblyItem()
		}

		p.SetState(804)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(805)
		p.Match(SolidityParserT__15)
	}

	return localctx
}

// IAssemblyItemContext is an interface to support dynamic dispatch.
type IAssemblyItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyItemContext differentiates from other interfaces.
	IsAssemblyItemContext()
}

type AssemblyItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyItemContext() *AssemblyItemContext {
	var p = new(AssemblyItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyItem
	return p
}

func (*AssemblyItemContext) IsAssemblyItemContext() {}

func NewAssemblyItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyItemContext {
	var p = new(AssemblyItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyItem

	return p
}

func (s *AssemblyItemContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyItemContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AssemblyItemContext) AssemblyBlock() IAssemblyBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyBlockContext)
}

func (s *AssemblyItemContext) AssemblyExpression() IAssemblyExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyExpressionContext)
}

func (s *AssemblyItemContext) AssemblyLocalDefinition() IAssemblyLocalDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyLocalDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyLocalDefinitionContext)
}

func (s *AssemblyItemContext) AssemblyAssignment() IAssemblyAssignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyAssignmentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyAssignmentContext)
}

func (s *AssemblyItemContext) AssemblyStackAssignment() IAssemblyStackAssignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyStackAssignmentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyStackAssignmentContext)
}

func (s *AssemblyItemContext) LabelDefinition() ILabelDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelDefinitionContext)
}

func (s *AssemblyItemContext) AssemblySwitch() IAssemblySwitchContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblySwitchContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblySwitchContext)
}

func (s *AssemblyItemContext) AssemblyFunctionDefinition() IAssemblyFunctionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyFunctionDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyFunctionDefinitionContext)
}

func (s *AssemblyItemContext) AssemblyFor() IAssemblyForContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyForContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyForContext)
}

func (s *AssemblyItemContext) AssemblyIf() IAssemblyIfContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyIfContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyIfContext)
}

func (s *AssemblyItemContext) BreakKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserBreakKeyword, 0)
}

func (s *AssemblyItemContext) ContinueKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserContinueKeyword, 0)
}

func (s *AssemblyItemContext) SubAssembly() ISubAssemblyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubAssemblyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubAssemblyContext)
}

func (s *AssemblyItemContext) NumberLiteral() INumberLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumberLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumberLiteralContext)
}

func (s *AssemblyItemContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(SolidityParserStringLiteral, 0)
}

func (s *AssemblyItemContext) HexLiteral() antlr.TerminalNode {
	return s.GetToken(SolidityParserHexLiteral, 0)
}

func (s *AssemblyItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblyItem(s)
	}
}

func (s *AssemblyItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblyItem(s)
	}
}

func (p *SolidityParser) AssemblyItem() (localctx IAssemblyItemContext) {
	localctx = NewAssemblyItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, SolidityParserRULE_assemblyItem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(824)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 85, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(807)
			p.Identifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(808)
			p.AssemblyBlock()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(809)
			p.AssemblyExpression()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(810)
			p.AssemblyLocalDefinition()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(811)
			p.AssemblyAssignment()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(812)
			p.AssemblyStackAssignment()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(813)
			p.LabelDefinition()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(814)
			p.AssemblySwitch()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(815)
			p.AssemblyFunctionDefinition()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(816)
			p.AssemblyFor()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(817)
			p.AssemblyIf()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(818)
			p.Match(SolidityParserBreakKeyword)
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(819)
			p.Match(SolidityParserContinueKeyword)
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(820)
			p.SubAssembly()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(821)
			p.NumberLiteral()
		}

	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(822)
			p.Match(SolidityParserStringLiteral)
		}

	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(823)
			p.Match(SolidityParserHexLiteral)
		}

	}

	return localctx
}

// IAssemblyExpressionContext is an interface to support dynamic dispatch.
type IAssemblyExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyExpressionContext differentiates from other interfaces.
	IsAssemblyExpressionContext()
}

type AssemblyExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyExpressionContext() *AssemblyExpressionContext {
	var p = new(AssemblyExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyExpression
	return p
}

func (*AssemblyExpressionContext) IsAssemblyExpressionContext() {}

func NewAssemblyExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyExpressionContext {
	var p = new(AssemblyExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyExpression

	return p
}

func (s *AssemblyExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyExpressionContext) AssemblyCall() IAssemblyCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyCallContext)
}

func (s *AssemblyExpressionContext) AssemblyLiteral() IAssemblyLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyLiteralContext)
}

func (s *AssemblyExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblyExpression(s)
	}
}

func (s *AssemblyExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblyExpression(s)
	}
}

func (p *SolidityParser) AssemblyExpression() (localctx IAssemblyExpressionContext) {
	localctx = NewAssemblyExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, SolidityParserRULE_assemblyExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(828)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__12, SolidityParserT__33, SolidityParserT__39, SolidityParserT__45, SolidityParserT__51, SolidityParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(826)
			p.AssemblyCall()
		}

	case SolidityParserDecimalNumber, SolidityParserHexNumber, SolidityParserHexLiteral, SolidityParserStringLiteral:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(827)
			p.AssemblyLiteral()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAssemblyCallContext is an interface to support dynamic dispatch.
type IAssemblyCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyCallContext differentiates from other interfaces.
	IsAssemblyCallContext()
}

type AssemblyCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyCallContext() *AssemblyCallContext {
	var p = new(AssemblyCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyCall
	return p
}

func (*AssemblyCallContext) IsAssemblyCallContext() {}

func NewAssemblyCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyCallContext {
	var p = new(AssemblyCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyCall

	return p
}

func (s *AssemblyCallContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyCallContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AssemblyCallContext) AllAssemblyExpression() []IAssemblyExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssemblyExpressionContext)(nil)).Elem())
	var tst = make([]IAssemblyExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssemblyExpressionContext)
		}
	}

	return tst
}

func (s *AssemblyCallContext) AssemblyExpression(i int) IAssemblyExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssemblyExpressionContext)
}

func (s *AssemblyCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblyCall(s)
	}
}

func (s *AssemblyCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblyCall(s)
	}
}

func (p *SolidityParser) AssemblyCall() (localctx IAssemblyCallContext) {
	localctx = NewAssemblyCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, SolidityParserRULE_assemblyCall)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(834)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__45:
		{
			p.SetState(830)
			p.Match(SolidityParserT__45)
		}

	case SolidityParserT__33:
		{
			p.SetState(831)
			p.Match(SolidityParserT__33)
		}

	case SolidityParserT__51:
		{
			p.SetState(832)
			p.Match(SolidityParserT__51)
		}

	case SolidityParserT__12, SolidityParserT__39, SolidityParserIdentifier:
		{
			p.SetState(833)
			p.Identifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(848)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 90, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(836)
			p.Match(SolidityParserT__20)
		}
		p.SetState(838)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SolidityParserT__12 || (((_la-34)&-(0x1f+1)) == 0 && ((1<<uint((_la-34)))&((1<<(SolidityParserT__33-34))|(1<<(SolidityParserT__39-34))|(1<<(SolidityParserT__45-34))|(1<<(SolidityParserT__51-34)))) != 0) || (((_la-100)&-(0x1f+1)) == 0 && ((1<<uint((_la-100)))&((1<<(SolidityParserDecimalNumber-100))|(1<<(SolidityParserHexNumber-100))|(1<<(SolidityParserHexLiteral-100))|(1<<(SolidityParserIdentifier-100))|(1<<(SolidityParserStringLiteral-100)))) != 0) {
			{
				p.SetState(837)
				p.AssemblyExpression()
			}

		}
		p.SetState(844)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SolidityParserT__14 {
			{
				p.SetState(840)
				p.Match(SolidityParserT__14)
			}
			{
				p.SetState(841)
				p.AssemblyExpression()
			}

			p.SetState(846)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(847)
			p.Match(SolidityParserT__21)
		}

	}

	return localctx
}

// IAssemblyLocalDefinitionContext is an interface to support dynamic dispatch.
type IAssemblyLocalDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyLocalDefinitionContext differentiates from other interfaces.
	IsAssemblyLocalDefinitionContext()
}

type AssemblyLocalDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyLocalDefinitionContext() *AssemblyLocalDefinitionContext {
	var p = new(AssemblyLocalDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyLocalDefinition
	return p
}

func (*AssemblyLocalDefinitionContext) IsAssemblyLocalDefinitionContext() {}

func NewAssemblyLocalDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyLocalDefinitionContext {
	var p = new(AssemblyLocalDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyLocalDefinition

	return p
}

func (s *AssemblyLocalDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyLocalDefinitionContext) AssemblyIdentifierOrList() IAssemblyIdentifierOrListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyIdentifierOrListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyIdentifierOrListContext)
}

func (s *AssemblyLocalDefinitionContext) AssemblyExpression() IAssemblyExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyExpressionContext)
}

func (s *AssemblyLocalDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyLocalDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyLocalDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblyLocalDefinition(s)
	}
}

func (s *AssemblyLocalDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblyLocalDefinition(s)
	}
}

func (p *SolidityParser) AssemblyLocalDefinition() (localctx IAssemblyLocalDefinitionContext) {
	localctx = NewAssemblyLocalDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, SolidityParserRULE_assemblyLocalDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(850)
		p.Match(SolidityParserT__83)
	}
	{
		p.SetState(851)
		p.AssemblyIdentifierOrList()
	}
	p.SetState(854)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__84 {
		{
			p.SetState(852)
			p.Match(SolidityParserT__84)
		}
		{
			p.SetState(853)
			p.AssemblyExpression()
		}

	}

	return localctx
}

// IAssemblyAssignmentContext is an interface to support dynamic dispatch.
type IAssemblyAssignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyAssignmentContext differentiates from other interfaces.
	IsAssemblyAssignmentContext()
}

type AssemblyAssignmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyAssignmentContext() *AssemblyAssignmentContext {
	var p = new(AssemblyAssignmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyAssignment
	return p
}

func (*AssemblyAssignmentContext) IsAssemblyAssignmentContext() {}

func NewAssemblyAssignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyAssignmentContext {
	var p = new(AssemblyAssignmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyAssignment

	return p
}

func (s *AssemblyAssignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyAssignmentContext) AssemblyIdentifierOrList() IAssemblyIdentifierOrListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyIdentifierOrListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyIdentifierOrListContext)
}

func (s *AssemblyAssignmentContext) AssemblyExpression() IAssemblyExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyExpressionContext)
}

func (s *AssemblyAssignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyAssignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyAssignmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblyAssignment(s)
	}
}

func (s *AssemblyAssignmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblyAssignment(s)
	}
}

func (p *SolidityParser) AssemblyAssignment() (localctx IAssemblyAssignmentContext) {
	localctx = NewAssemblyAssignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, SolidityParserRULE_assemblyAssignment)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(856)
		p.AssemblyIdentifierOrList()
	}
	{
		p.SetState(857)
		p.Match(SolidityParserT__84)
	}
	{
		p.SetState(858)
		p.AssemblyExpression()
	}

	return localctx
}

// IAssemblyIdentifierOrListContext is an interface to support dynamic dispatch.
type IAssemblyIdentifierOrListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyIdentifierOrListContext differentiates from other interfaces.
	IsAssemblyIdentifierOrListContext()
}

type AssemblyIdentifierOrListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyIdentifierOrListContext() *AssemblyIdentifierOrListContext {
	var p = new(AssemblyIdentifierOrListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyIdentifierOrList
	return p
}

func (*AssemblyIdentifierOrListContext) IsAssemblyIdentifierOrListContext() {}

func NewAssemblyIdentifierOrListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyIdentifierOrListContext {
	var p = new(AssemblyIdentifierOrListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyIdentifierOrList

	return p
}

func (s *AssemblyIdentifierOrListContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyIdentifierOrListContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AssemblyIdentifierOrListContext) AssemblyIdentifierList() IAssemblyIdentifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyIdentifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyIdentifierListContext)
}

func (s *AssemblyIdentifierOrListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyIdentifierOrListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyIdentifierOrListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblyIdentifierOrList(s)
	}
}

func (s *AssemblyIdentifierOrListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblyIdentifierOrList(s)
	}
}

func (p *SolidityParser) AssemblyIdentifierOrList() (localctx IAssemblyIdentifierOrListContext) {
	localctx = NewAssemblyIdentifierOrListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, SolidityParserRULE_assemblyIdentifierOrList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(865)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__12, SolidityParserT__39, SolidityParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(860)
			p.Identifier()
		}

	case SolidityParserT__20:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(861)
			p.Match(SolidityParserT__20)
		}
		{
			p.SetState(862)
			p.AssemblyIdentifierList()
		}
		{
			p.SetState(863)
			p.Match(SolidityParserT__21)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAssemblyIdentifierListContext is an interface to support dynamic dispatch.
type IAssemblyIdentifierListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyIdentifierListContext differentiates from other interfaces.
	IsAssemblyIdentifierListContext()
}

type AssemblyIdentifierListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyIdentifierListContext() *AssemblyIdentifierListContext {
	var p = new(AssemblyIdentifierListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyIdentifierList
	return p
}

func (*AssemblyIdentifierListContext) IsAssemblyIdentifierListContext() {}

func NewAssemblyIdentifierListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyIdentifierListContext {
	var p = new(AssemblyIdentifierListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyIdentifierList

	return p
}

func (s *AssemblyIdentifierListContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyIdentifierListContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *AssemblyIdentifierListContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AssemblyIdentifierListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyIdentifierListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyIdentifierListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblyIdentifierList(s)
	}
}

func (s *AssemblyIdentifierListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblyIdentifierList(s)
	}
}

func (p *SolidityParser) AssemblyIdentifierList() (localctx IAssemblyIdentifierListContext) {
	localctx = NewAssemblyIdentifierListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, SolidityParserRULE_assemblyIdentifierList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(867)
		p.Identifier()
	}
	p.SetState(872)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SolidityParserT__14 {
		{
			p.SetState(868)
			p.Match(SolidityParserT__14)
		}
		{
			p.SetState(869)
			p.Identifier()
		}

		p.SetState(874)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAssemblyStackAssignmentContext is an interface to support dynamic dispatch.
type IAssemblyStackAssignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyStackAssignmentContext differentiates from other interfaces.
	IsAssemblyStackAssignmentContext()
}

type AssemblyStackAssignmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyStackAssignmentContext() *AssemblyStackAssignmentContext {
	var p = new(AssemblyStackAssignmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyStackAssignment
	return p
}

func (*AssemblyStackAssignmentContext) IsAssemblyStackAssignmentContext() {}

func NewAssemblyStackAssignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyStackAssignmentContext {
	var p = new(AssemblyStackAssignmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyStackAssignment

	return p
}

func (s *AssemblyStackAssignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyStackAssignmentContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AssemblyStackAssignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyStackAssignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyStackAssignmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblyStackAssignment(s)
	}
}

func (s *AssemblyStackAssignmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblyStackAssignment(s)
	}
}

func (p *SolidityParser) AssemblyStackAssignment() (localctx IAssemblyStackAssignmentContext) {
	localctx = NewAssemblyStackAssignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, SolidityParserRULE_assemblyStackAssignment)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(875)
		p.Match(SolidityParserT__85)
	}
	{
		p.SetState(876)
		p.Identifier()
	}

	return localctx
}

// ILabelDefinitionContext is an interface to support dynamic dispatch.
type ILabelDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabelDefinitionContext differentiates from other interfaces.
	IsLabelDefinitionContext()
}

type LabelDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelDefinitionContext() *LabelDefinitionContext {
	var p = new(LabelDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_labelDefinition
	return p
}

func (*LabelDefinitionContext) IsLabelDefinitionContext() {}

func NewLabelDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelDefinitionContext {
	var p = new(LabelDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_labelDefinition

	return p
}

func (s *LabelDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *LabelDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterLabelDefinition(s)
	}
}

func (s *LabelDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitLabelDefinition(s)
	}
}

func (p *SolidityParser) LabelDefinition() (localctx ILabelDefinitionContext) {
	localctx = NewLabelDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, SolidityParserRULE_labelDefinition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(878)
		p.Identifier()
	}
	{
		p.SetState(879)
		p.Match(SolidityParserT__72)
	}

	return localctx
}

// IAssemblySwitchContext is an interface to support dynamic dispatch.
type IAssemblySwitchContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblySwitchContext differentiates from other interfaces.
	IsAssemblySwitchContext()
}

type AssemblySwitchContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblySwitchContext() *AssemblySwitchContext {
	var p = new(AssemblySwitchContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblySwitch
	return p
}

func (*AssemblySwitchContext) IsAssemblySwitchContext() {}

func NewAssemblySwitchContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblySwitchContext {
	var p = new(AssemblySwitchContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblySwitch

	return p
}

func (s *AssemblySwitchContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblySwitchContext) AssemblyExpression() IAssemblyExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyExpressionContext)
}

func (s *AssemblySwitchContext) AllAssemblyCase() []IAssemblyCaseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssemblyCaseContext)(nil)).Elem())
	var tst = make([]IAssemblyCaseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssemblyCaseContext)
		}
	}

	return tst
}

func (s *AssemblySwitchContext) AssemblyCase(i int) IAssemblyCaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyCaseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssemblyCaseContext)
}

func (s *AssemblySwitchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblySwitchContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblySwitchContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblySwitch(s)
	}
}

func (s *AssemblySwitchContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblySwitch(s)
	}
}

func (p *SolidityParser) AssemblySwitch() (localctx IAssemblySwitchContext) {
	localctx = NewAssemblySwitchContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, SolidityParserRULE_assemblySwitch)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(881)
		p.Match(SolidityParserT__86)
	}
	{
		p.SetState(882)
		p.AssemblyExpression()
	}
	p.SetState(886)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SolidityParserT__87 || _la == SolidityParserT__88 {
		{
			p.SetState(883)
			p.AssemblyCase()
		}

		p.SetState(888)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IAssemblyCaseContext is an interface to support dynamic dispatch.
type IAssemblyCaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyCaseContext differentiates from other interfaces.
	IsAssemblyCaseContext()
}

type AssemblyCaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyCaseContext() *AssemblyCaseContext {
	var p = new(AssemblyCaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyCase
	return p
}

func (*AssemblyCaseContext) IsAssemblyCaseContext() {}

func NewAssemblyCaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyCaseContext {
	var p = new(AssemblyCaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyCase

	return p
}

func (s *AssemblyCaseContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyCaseContext) AssemblyLiteral() IAssemblyLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyLiteralContext)
}

func (s *AssemblyCaseContext) AssemblyBlock() IAssemblyBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyBlockContext)
}

func (s *AssemblyCaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyCaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyCaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblyCase(s)
	}
}

func (s *AssemblyCaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblyCase(s)
	}
}

func (p *SolidityParser) AssemblyCase() (localctx IAssemblyCaseContext) {
	localctx = NewAssemblyCaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, SolidityParserRULE_assemblyCase)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(895)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__87:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(889)
			p.Match(SolidityParserT__87)
		}
		{
			p.SetState(890)
			p.AssemblyLiteral()
		}
		{
			p.SetState(891)
			p.AssemblyBlock()
		}

	case SolidityParserT__88:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(893)
			p.Match(SolidityParserT__88)
		}
		{
			p.SetState(894)
			p.AssemblyBlock()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAssemblyFunctionDefinitionContext is an interface to support dynamic dispatch.
type IAssemblyFunctionDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyFunctionDefinitionContext differentiates from other interfaces.
	IsAssemblyFunctionDefinitionContext()
}

type AssemblyFunctionDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyFunctionDefinitionContext() *AssemblyFunctionDefinitionContext {
	var p = new(AssemblyFunctionDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyFunctionDefinition
	return p
}

func (*AssemblyFunctionDefinitionContext) IsAssemblyFunctionDefinitionContext() {}

func NewAssemblyFunctionDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyFunctionDefinitionContext {
	var p = new(AssemblyFunctionDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyFunctionDefinition

	return p
}

func (s *AssemblyFunctionDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyFunctionDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AssemblyFunctionDefinitionContext) AssemblyBlock() IAssemblyBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyBlockContext)
}

func (s *AssemblyFunctionDefinitionContext) AssemblyIdentifierList() IAssemblyIdentifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyIdentifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyIdentifierListContext)
}

func (s *AssemblyFunctionDefinitionContext) AssemblyFunctionReturns() IAssemblyFunctionReturnsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyFunctionReturnsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyFunctionReturnsContext)
}

func (s *AssemblyFunctionDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyFunctionDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyFunctionDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblyFunctionDefinition(s)
	}
}

func (s *AssemblyFunctionDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblyFunctionDefinition(s)
	}
}

func (p *SolidityParser) AssemblyFunctionDefinition() (localctx IAssemblyFunctionDefinitionContext) {
	localctx = NewAssemblyFunctionDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, SolidityParserRULE_assemblyFunctionDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(897)
		p.Match(SolidityParserT__27)
	}
	{
		p.SetState(898)
		p.Identifier()
	}
	{
		p.SetState(899)
		p.Match(SolidityParserT__20)
	}
	p.SetState(901)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__12 || _la == SolidityParserT__39 || _la == SolidityParserIdentifier {
		{
			p.SetState(900)
			p.AssemblyIdentifierList()
		}

	}
	{
		p.SetState(903)
		p.Match(SolidityParserT__21)
	}
	p.SetState(905)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserT__89 {
		{
			p.SetState(904)
			p.AssemblyFunctionReturns()
		}

	}
	{
		p.SetState(907)
		p.AssemblyBlock()
	}

	return localctx
}

// IAssemblyFunctionReturnsContext is an interface to support dynamic dispatch.
type IAssemblyFunctionReturnsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyFunctionReturnsContext differentiates from other interfaces.
	IsAssemblyFunctionReturnsContext()
}

type AssemblyFunctionReturnsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyFunctionReturnsContext() *AssemblyFunctionReturnsContext {
	var p = new(AssemblyFunctionReturnsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyFunctionReturns
	return p
}

func (*AssemblyFunctionReturnsContext) IsAssemblyFunctionReturnsContext() {}

func NewAssemblyFunctionReturnsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyFunctionReturnsContext {
	var p = new(AssemblyFunctionReturnsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyFunctionReturns

	return p
}

func (s *AssemblyFunctionReturnsContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyFunctionReturnsContext) AssemblyIdentifierList() IAssemblyIdentifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyIdentifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyIdentifierListContext)
}

func (s *AssemblyFunctionReturnsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyFunctionReturnsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyFunctionReturnsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblyFunctionReturns(s)
	}
}

func (s *AssemblyFunctionReturnsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblyFunctionReturns(s)
	}
}

func (p *SolidityParser) AssemblyFunctionReturns() (localctx IAssemblyFunctionReturnsContext) {
	localctx = NewAssemblyFunctionReturnsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, SolidityParserRULE_assemblyFunctionReturns)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(909)
		p.Match(SolidityParserT__89)
	}
	{
		p.SetState(910)
		p.AssemblyIdentifierList()
	}

	return localctx
}

// IAssemblyForContext is an interface to support dynamic dispatch.
type IAssemblyForContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyForContext differentiates from other interfaces.
	IsAssemblyForContext()
}

type AssemblyForContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyForContext() *AssemblyForContext {
	var p = new(AssemblyForContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyFor
	return p
}

func (*AssemblyForContext) IsAssemblyForContext() {}

func NewAssemblyForContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyForContext {
	var p = new(AssemblyForContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyFor

	return p
}

func (s *AssemblyForContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyForContext) AllAssemblyExpression() []IAssemblyExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssemblyExpressionContext)(nil)).Elem())
	var tst = make([]IAssemblyExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssemblyExpressionContext)
		}
	}

	return tst
}

func (s *AssemblyForContext) AssemblyExpression(i int) IAssemblyExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssemblyExpressionContext)
}

func (s *AssemblyForContext) AllAssemblyBlock() []IAssemblyBlockContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssemblyBlockContext)(nil)).Elem())
	var tst = make([]IAssemblyBlockContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssemblyBlockContext)
		}
	}

	return tst
}

func (s *AssemblyForContext) AssemblyBlock(i int) IAssemblyBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyBlockContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssemblyBlockContext)
}

func (s *AssemblyForContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyForContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyForContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblyFor(s)
	}
}

func (s *AssemblyForContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblyFor(s)
	}
}

func (p *SolidityParser) AssemblyFor() (localctx IAssemblyForContext) {
	localctx = NewAssemblyForContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, SolidityParserRULE_assemblyFor)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(912)
		p.Match(SolidityParserT__23)
	}
	p.SetState(915)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__13:
		{
			p.SetState(913)
			p.AssemblyBlock()
		}

	case SolidityParserT__12, SolidityParserT__33, SolidityParserT__39, SolidityParserT__45, SolidityParserT__51, SolidityParserDecimalNumber, SolidityParserHexNumber, SolidityParserHexLiteral, SolidityParserIdentifier, SolidityParserStringLiteral:
		{
			p.SetState(914)
			p.AssemblyExpression()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(917)
		p.AssemblyExpression()
	}
	p.SetState(920)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__13:
		{
			p.SetState(918)
			p.AssemblyBlock()
		}

	case SolidityParserT__12, SolidityParserT__33, SolidityParserT__39, SolidityParserT__45, SolidityParserT__51, SolidityParserDecimalNumber, SolidityParserHexNumber, SolidityParserHexLiteral, SolidityParserIdentifier, SolidityParserStringLiteral:
		{
			p.SetState(919)
			p.AssemblyExpression()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(922)
		p.AssemblyBlock()
	}

	return localctx
}

// IAssemblyIfContext is an interface to support dynamic dispatch.
type IAssemblyIfContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyIfContext differentiates from other interfaces.
	IsAssemblyIfContext()
}

type AssemblyIfContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyIfContext() *AssemblyIfContext {
	var p = new(AssemblyIfContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyIf
	return p
}

func (*AssemblyIfContext) IsAssemblyIfContext() {}

func NewAssemblyIfContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyIfContext {
	var p = new(AssemblyIfContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyIf

	return p
}

func (s *AssemblyIfContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyIfContext) AssemblyExpression() IAssemblyExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyExpressionContext)
}

func (s *AssemblyIfContext) AssemblyBlock() IAssemblyBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyBlockContext)
}

func (s *AssemblyIfContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyIfContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyIfContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblyIf(s)
	}
}

func (s *AssemblyIfContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblyIf(s)
	}
}

func (p *SolidityParser) AssemblyIf() (localctx IAssemblyIfContext) {
	localctx = NewAssemblyIfContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, SolidityParserRULE_assemblyIf)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(924)
		p.Match(SolidityParserT__40)
	}
	{
		p.SetState(925)
		p.AssemblyExpression()
	}
	{
		p.SetState(926)
		p.AssemblyBlock()
	}

	return localctx
}

// IAssemblyLiteralContext is an interface to support dynamic dispatch.
type IAssemblyLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyLiteralContext differentiates from other interfaces.
	IsAssemblyLiteralContext()
}

type AssemblyLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyLiteralContext() *AssemblyLiteralContext {
	var p = new(AssemblyLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyLiteral
	return p
}

func (*AssemblyLiteralContext) IsAssemblyLiteralContext() {}

func NewAssemblyLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyLiteralContext {
	var p = new(AssemblyLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyLiteral

	return p
}

func (s *AssemblyLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyLiteralContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(SolidityParserStringLiteral, 0)
}

func (s *AssemblyLiteralContext) DecimalNumber() antlr.TerminalNode {
	return s.GetToken(SolidityParserDecimalNumber, 0)
}

func (s *AssemblyLiteralContext) HexNumber() antlr.TerminalNode {
	return s.GetToken(SolidityParserHexNumber, 0)
}

func (s *AssemblyLiteralContext) HexLiteral() antlr.TerminalNode {
	return s.GetToken(SolidityParserHexLiteral, 0)
}

func (s *AssemblyLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterAssemblyLiteral(s)
	}
}

func (s *AssemblyLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitAssemblyLiteral(s)
	}
}

func (p *SolidityParser) AssemblyLiteral() (localctx IAssemblyLiteralContext) {
	localctx = NewAssemblyLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, SolidityParserRULE_assemblyLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(928)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-100)&-(0x1f+1)) == 0 && ((1<<uint((_la-100)))&((1<<(SolidityParserDecimalNumber-100))|(1<<(SolidityParserHexNumber-100))|(1<<(SolidityParserHexLiteral-100))|(1<<(SolidityParserStringLiteral-100)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ISubAssemblyContext is an interface to support dynamic dispatch.
type ISubAssemblyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubAssemblyContext differentiates from other interfaces.
	IsSubAssemblyContext()
}

type SubAssemblyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubAssemblyContext() *SubAssemblyContext {
	var p = new(SubAssemblyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_subAssembly
	return p
}

func (*SubAssemblyContext) IsSubAssemblyContext() {}

func NewSubAssemblyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubAssemblyContext {
	var p = new(SubAssemblyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_subAssembly

	return p
}

func (s *SubAssemblyContext) GetParser() antlr.Parser { return s.parser }

func (s *SubAssemblyContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *SubAssemblyContext) AssemblyBlock() IAssemblyBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyBlockContext)
}

func (s *SubAssemblyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubAssemblyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubAssemblyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterSubAssembly(s)
	}
}

func (s *SubAssemblyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitSubAssembly(s)
	}
}

func (p *SolidityParser) SubAssembly() (localctx ISubAssemblyContext) {
	localctx = NewSubAssemblyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, SolidityParserRULE_subAssembly)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(930)
		p.Match(SolidityParserT__43)
	}
	{
		p.SetState(931)
		p.Identifier()
	}
	{
		p.SetState(932)
		p.AssemblyBlock()
	}

	return localctx
}

// ITupleExpressionContext is an interface to support dynamic dispatch.
type ITupleExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleExpressionContext differentiates from other interfaces.
	IsTupleExpressionContext()
}

type TupleExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleExpressionContext() *TupleExpressionContext {
	var p = new(TupleExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_tupleExpression
	return p
}

func (*TupleExpressionContext) IsTupleExpressionContext() {}

func NewTupleExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleExpressionContext {
	var p = new(TupleExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_tupleExpression

	return p
}

func (s *TupleExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *TupleExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TupleExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterTupleExpression(s)
	}
}

func (s *TupleExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitTupleExpression(s)
	}
}

func (p *SolidityParser) TupleExpression() (localctx ITupleExpressionContext) {
	localctx = NewTupleExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, SolidityParserRULE_tupleExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(960)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__20:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(934)
			p.Match(SolidityParserT__20)
		}

		p.SetState(936)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__3)|(1<<SolidityParserT__12)|(1<<SolidityParserT__20))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(SolidityParserT__31-32))|(1<<(SolidityParserT__33-32))|(1<<(SolidityParserT__39-32))|(1<<(SolidityParserT__48-32))|(1<<(SolidityParserT__49-32))|(1<<(SolidityParserT__50-32))|(1<<(SolidityParserT__51-32))|(1<<(SolidityParserT__52-32))|(1<<(SolidityParserT__53-32))|(1<<(SolidityParserT__54-32))|(1<<(SolidityParserT__55-32))|(1<<(SolidityParserT__56-32))|(1<<(SolidityParserT__57-32))|(1<<(SolidityParserT__58-32))|(1<<(SolidityParserT__59-32)))) != 0) || (((_la-93)&-(0x1f+1)) == 0 && ((1<<uint((_la-93)))&((1<<(SolidityParserInt-93))|(1<<(SolidityParserUint-93))|(1<<(SolidityParserByte-93))|(1<<(SolidityParserFixed-93))|(1<<(SolidityParserUfixed-93))|(1<<(SolidityParserBooleanLiteral-93))|(1<<(SolidityParserDecimalNumber-93))|(1<<(SolidityParserHexNumber-93))|(1<<(SolidityParserHexLiteral-93))|(1<<(SolidityParserTypeKeyword-93))|(1<<(SolidityParserIdentifier-93))|(1<<(SolidityParserStringLiteral-93)))) != 0) {
			{
				p.SetState(935)
				p.expression(0)
			}

		}
		p.SetState(944)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SolidityParserT__14 {
			{
				p.SetState(938)
				p.Match(SolidityParserT__14)
			}
			p.SetState(940)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__3)|(1<<SolidityParserT__12)|(1<<SolidityParserT__20))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(SolidityParserT__31-32))|(1<<(SolidityParserT__33-32))|(1<<(SolidityParserT__39-32))|(1<<(SolidityParserT__48-32))|(1<<(SolidityParserT__49-32))|(1<<(SolidityParserT__50-32))|(1<<(SolidityParserT__51-32))|(1<<(SolidityParserT__52-32))|(1<<(SolidityParserT__53-32))|(1<<(SolidityParserT__54-32))|(1<<(SolidityParserT__55-32))|(1<<(SolidityParserT__56-32))|(1<<(SolidityParserT__57-32))|(1<<(SolidityParserT__58-32))|(1<<(SolidityParserT__59-32)))) != 0) || (((_la-93)&-(0x1f+1)) == 0 && ((1<<uint((_la-93)))&((1<<(SolidityParserInt-93))|(1<<(SolidityParserUint-93))|(1<<(SolidityParserByte-93))|(1<<(SolidityParserFixed-93))|(1<<(SolidityParserUfixed-93))|(1<<(SolidityParserBooleanLiteral-93))|(1<<(SolidityParserDecimalNumber-93))|(1<<(SolidityParserHexNumber-93))|(1<<(SolidityParserHexLiteral-93))|(1<<(SolidityParserTypeKeyword-93))|(1<<(SolidityParserIdentifier-93))|(1<<(SolidityParserStringLiteral-93)))) != 0) {
				{
					p.SetState(939)
					p.expression(0)
				}

			}

			p.SetState(946)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

		{
			p.SetState(947)
			p.Match(SolidityParserT__21)
		}

	case SolidityParserT__31:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(948)
			p.Match(SolidityParserT__31)
		}
		p.SetState(957)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SolidityParserT__3)|(1<<SolidityParserT__12)|(1<<SolidityParserT__20))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(SolidityParserT__31-32))|(1<<(SolidityParserT__33-32))|(1<<(SolidityParserT__39-32))|(1<<(SolidityParserT__48-32))|(1<<(SolidityParserT__49-32))|(1<<(SolidityParserT__50-32))|(1<<(SolidityParserT__51-32))|(1<<(SolidityParserT__52-32))|(1<<(SolidityParserT__53-32))|(1<<(SolidityParserT__54-32))|(1<<(SolidityParserT__55-32))|(1<<(SolidityParserT__56-32))|(1<<(SolidityParserT__57-32))|(1<<(SolidityParserT__58-32))|(1<<(SolidityParserT__59-32)))) != 0) || (((_la-93)&-(0x1f+1)) == 0 && ((1<<uint((_la-93)))&((1<<(SolidityParserInt-93))|(1<<(SolidityParserUint-93))|(1<<(SolidityParserByte-93))|(1<<(SolidityParserFixed-93))|(1<<(SolidityParserUfixed-93))|(1<<(SolidityParserBooleanLiteral-93))|(1<<(SolidityParserDecimalNumber-93))|(1<<(SolidityParserHexNumber-93))|(1<<(SolidityParserHexLiteral-93))|(1<<(SolidityParserTypeKeyword-93))|(1<<(SolidityParserIdentifier-93))|(1<<(SolidityParserStringLiteral-93)))) != 0) {
			{
				p.SetState(949)
				p.expression(0)
			}
			p.SetState(954)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SolidityParserT__14 {
				{
					p.SetState(950)
					p.Match(SolidityParserT__14)
				}
				{
					p.SetState(951)
					p.expression(0)
				}

				p.SetState(956)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(959)
			p.Match(SolidityParserT__32)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITypeNameExpressionContext is an interface to support dynamic dispatch.
type ITypeNameExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeNameExpressionContext differentiates from other interfaces.
	IsTypeNameExpressionContext()
}

type TypeNameExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeNameExpressionContext() *TypeNameExpressionContext {
	var p = new(TypeNameExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_typeNameExpression
	return p
}

func (*TypeNameExpressionContext) IsTypeNameExpressionContext() {}

func NewTypeNameExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeNameExpressionContext {
	var p = new(TypeNameExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_typeNameExpression

	return p
}

func (s *TypeNameExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeNameExpressionContext) ElementaryTypeName() IElementaryTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementaryTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementaryTypeNameContext)
}

func (s *TypeNameExpressionContext) UserDefinedTypeName() IUserDefinedTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserDefinedTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserDefinedTypeNameContext)
}

func (s *TypeNameExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeNameExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeNameExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterTypeNameExpression(s)
	}
}

func (s *TypeNameExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitTypeNameExpression(s)
	}
}

func (p *SolidityParser) TypeNameExpression() (localctx ITypeNameExpressionContext) {
	localctx = NewTypeNameExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, SolidityParserRULE_typeNameExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(964)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__33, SolidityParserT__48, SolidityParserT__49, SolidityParserT__50, SolidityParserT__51, SolidityParserInt, SolidityParserUint, SolidityParserByte, SolidityParserFixed, SolidityParserUfixed:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(962)
			p.ElementaryTypeName()
		}

	case SolidityParserT__12, SolidityParserT__39, SolidityParserIdentifier:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(963)
			p.UserDefinedTypeName()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// INumberLiteralContext is an interface to support dynamic dispatch.
type INumberLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNumberLiteralContext differentiates from other interfaces.
	IsNumberLiteralContext()
}

type NumberLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumberLiteralContext() *NumberLiteralContext {
	var p = new(NumberLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_numberLiteral
	return p
}

func (*NumberLiteralContext) IsNumberLiteralContext() {}

func NewNumberLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumberLiteralContext {
	var p = new(NumberLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_numberLiteral

	return p
}

func (s *NumberLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *NumberLiteralContext) DecimalNumber() antlr.TerminalNode {
	return s.GetToken(SolidityParserDecimalNumber, 0)
}

func (s *NumberLiteralContext) HexNumber() antlr.TerminalNode {
	return s.GetToken(SolidityParserHexNumber, 0)
}

func (s *NumberLiteralContext) NumberUnit() antlr.TerminalNode {
	return s.GetToken(SolidityParserNumberUnit, 0)
}

func (s *NumberLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumberLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumberLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterNumberLiteral(s)
	}
}

func (s *NumberLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitNumberLiteral(s)
	}
}

func (p *SolidityParser) NumberLiteral() (localctx INumberLiteralContext) {
	localctx = NewNumberLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, SolidityParserRULE_numberLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(966)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SolidityParserDecimalNumber || _la == SolidityParserHexNumber) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(968)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 107, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(967)
			p.Match(SolidityParserNumberUnit)
		}

	}

	return localctx
}

// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_identifier
	return p
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) Identifier() antlr.TerminalNode {
	return s.GetToken(SolidityParserIdentifier, 0)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.EnterIdentifier(s)
	}
}

func (s *IdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityListener); ok {
		listenerT.ExitIdentifier(s)
	}
}

func (p *SolidityParser) Identifier() (localctx IIdentifierContext) {
	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, SolidityParserRULE_identifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(970)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SolidityParserT__12 || _la == SolidityParserT__39 || _la == SolidityParserIdentifier) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

func (p *SolidityParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 32:
		var t *TypeNameContext = nil
		if localctx != nil {
			t = localctx.(*TypeNameContext)
		}
		return p.TypeName_Sempred(t, predIndex)

	case 56:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *SolidityParser) TypeName_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 3)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *SolidityParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 14)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 12)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 13:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 14:
		return p.Precpred(p.GetParserRuleContext(), 25)

	case 15:
		return p.Precpred(p.GetParserRuleContext(), 23)

	case 16:
		return p.Precpred(p.GetParserRuleContext(), 22)

	case 17:
		return p.Precpred(p.GetParserRuleContext(), 21)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
